JLJac
91

<b>Update 273</b><br>Ok, so on to the next task! Today I&#039;ve created a class for abstracted creatures, and made them able to move around between rooms. They&#039;re also contained in little lists in the abstract rooms, and receive updates.<br><br>Each abstract room has one &quot;node&quot; per exit. Abstract creatures keep track of which such node they are &quot;in&quot;. The quotation marks on that last one is the complicated bit. A node doesn&#039;t really symbolize a specific area of the room, rather all the nodes tend to share most of the area of a level. Take a look at this room:<br><br><img src="https://web.archive.org/web/20141219115756im_/http://imgwiz.com/images/2014/07/16/94BKd.png" alt="" border="0"><br><br>This room has three exits, and therefor three nodes. Let&#039;s call the top left one A, the upper right one B, and the one down in the pit C.<br><br>So, from A you can get to B, from B you can get to A, and every tile you can get to from A you can also get to from B. So it&#039;s not as simple as saying that a certain group of tiles represent a certain node. Rather nodes symbolize <i>goals </i>and <i>destinations</i>.<br><br>Now imagine that this room is offloaded, and represented solely with its nodes.<br><br>Remember how I told you that the game has mapped how to get from every exit to every exit for every room as every creature? That info is used here. Say that a creature enters from the left exit. It&#039;s position will now be set to this room, and node A. Each creature has a timer for how long it has been in that node. When it moves the timer is reset.<br><br>The creature also know where it wants to go next, in this case let&#039;s say out the exit C. The pre-baked mapping knows the distance between the two exits, so in the abstracted space it&#039;s very simple - once the creature has been in node A for a time that is long enough to correspond to that distance times a movement speed, it switches to node C. Then the timer resets, and the same procedure repeats for the next destination. This way the creatures move between nodes with a speed that corresponds to the actual tile-level distances between them.<br><br>The roaming behavior I have currently set up looks at what node a creature is in, and looks at exits for adjacent rooms. It can only go to nodes that are mapped as reachable, and also only follows paths that can be followed back, in order to not get stuck in a dead end. So say that the creature is in node A, then its next move can either be to move back out through the exit A, or the exit B, but not C as it won&#039;t choose routes where it can&#039;t get back. If it is in node C, its only option is to return out through the same exit. <br><br>The framework also allows for saving paths, meaning that creatures can have more deliberate movements throughout the world as well. An obvious example of this would be getting back to their dens when the rain gets closer. I imagine that it would be kind of cool to suddenly notice a lot of traffic of creatures through your room as they are all scurrying back to their respective dens.<br><br>In the future, if you were to walk into the room while the creature is moving from A to B, it&#039;ll just use the timer to place the creature at a certain point along the path between the two exits. That way you&#039;ll be able to walk in on a creature in the middle of traversing a room.<br><br>What I&#039;m working with now, is having the creatures transition seamlessly between abstracted and realized modes. Say that you are in a room, hidden. Then you should be able to see a lizard come in through one exit, pass through the room without noticing you, and continue out the other. This means that the lizard has to change from abstracted to realized back to abstracted again, with some parameters remaining intact. More on this tomorrow!
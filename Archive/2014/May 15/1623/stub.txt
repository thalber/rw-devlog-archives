JLJac
81

Hi! Thanks&nbsp; <img src="https://web.archive.org/web/20141228135528im_/http://forums.tigsource.com/Smileys/derek/grin.gif" alt="Grin" border="0"><br><br><div class="quoteheader"><a href="https://web.archive.org/web/20141228135528/http://forums.tigsource.com/index.php?topic=25183.msg1022028#msg1022028">Quote from: kruxus on May 14, 2014, 04:17:25 AM</a></div><div class="quote">Btw, how much control do you have over custom shaders in Futile? Can you customize how it does the setup of vertex buffers and other parameters sent to the GPU?<br></div>I don&#039;t know yet, as I haven&#039;t encountered those problems so far. What I have had some problems with is that Unity&#039;s way of reaching a shader (for setting parameters) is through the material which the shader is connected to, and I haven&#039;t been able to reach the material used by Futile&#039;s sprites. Instead I&#039;ve had to use global shader params, but I&#039;ll have to actually solve that sooner or later.<br><br><b>Update 138</b><br>Slugcat animation is coming along! I was stalled a bit because I didn&#039;t know how to approach the tail now that I don&#039;t have beizer curves. Like always when I&#039;m stuck it was James who helped me get moving again. We checked out the vector graphic options in Unity&#039;s app store, and after a bit of research it was clear that they all just used countless triangles to draw the vector lines. <br><br>So, then we decided that if that was the case, I could as well move around triangles myself. So today I made a triangle mesh object, where you can define a number of triangles, and some vertices. The triangles are just references to three different vertices, meaning that sharing vertices between triangles is super easy. If I want to make a four-sided polygon for example, a quad, I can just go:<br><div class="quoteheader">Quote</div><div class="quote">TriangleMesh.Triangle&#91;] tris = new TriangleMesh.Triangle[2] {<br>&nbsp; &nbsp; &nbsp; &nbsp; new TriangleMesh.Triangle (0, 1, 2), <br>&nbsp; &nbsp; &nbsp; &nbsp; new TriangleMesh.Triangle (1, 2, 3)<br>};<br><br>TriangleMesh mesh = new TriangleMesh (&quot;Futile_White&quot;, tris);<br></div><br>And then when I move around vertices 1 and 2, which are shared by both triangles, both triangles will change accordingly.<br><br>The test run of this structure is the slugcat tail, for which I programmed the physics the other day as you might remember. Behold - 4 little balls of physics and 13 triangles drawing a shape on top of them:<br><br><img src="https://web.archive.org/web/20141228135528im_/http://imgwiz.com/images/2014/05/15/t5A.gif" alt="" border="0"><br><br>Looks pretty smooth right? <img src="https://web.archive.org/web/20141228135528im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"><br><br>Next up, probably a head or something. 
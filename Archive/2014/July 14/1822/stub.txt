JLJac
91

Wow that&#039;s really awesome! Ghost cats :D<br><br>Yeah, as James said, right now we&#039;re concentrating on making it before porting it, so it might be a while :S<br><br><b>Update 271</b><br>Alright, moving between multiple loaded rooms done!<br><br><img src="https://web.archive.org/web/20141219115756im_/http://imgwiz.com/images/2014/07/14/ah0Ws.gif" alt="" border="0"><br><br>In the gif, when you see the tiles up above the pit turn blue, that&#039;s me setting a destination. The lizard (pink cubes) has to make its way up there! Then the gif shows it as it&#039;s moving through multiple rooms in order to reach the destination.<br><br>Let&#039;s take a closer look at what&#039;s happening when you enter a room:<br><br><img src="https://web.archive.org/web/20141219115756im_/http://imgwiz.com/images/2014/07/14/B8RP.gif" alt="" border="0"><br><br>Notice how there&#039;s a path that&#039;s already there, and then it starts to swell out all over in two waves? When entering a room, the quickPathFinder - of a couple of pages ago fame - kicks in. It looks at all the neighboring rooms, checks which has the lowest pathing value (closest to the target) and makes a quick and dirty path to the corresponding exit.<br><br>The thing with quick paths is that they&#039;re made to be quick to <i>calculate</i>, not necessarily the most effective way to get there. Though they might be, if the maze is very simple. Anyhow, the quick path algorithm finds a quick and dirty way to the next exit, because the lizard should have something to follow right away when it enters the room. As it goes the real path finder will catch up with it, and it&#039;ll get a more reliable path, but the quick path is good enough to follow for the first couple of tiles.<br><br>As you might have noticed the accessibility mapping swells out from the quick path. This is because these tiles are already set to accessible when the level starts, and need to continue to be so as the accessible area is mapped, or the creature might stop in its tracks. Because of that I&#039;ve fed all of the quick path tiles into the accessibility mapper as starting tiles.<br><br>Once the two layers of accessibility (reachable/possible to get back from) have been mapped, the path finder is told to create a new pathing generation, just like it would when chasing a target inside the room. But this time, it&#039;s the off-screen goal that&#039;s assigned. The path finding algorithm will search throughout the network of abstract rooms, and find its way to the current, realized room, where it will start flooding the tiles from the correct exit. In the gif this can be seen as purple, if you look closely.<br><br>Once the creature starts to follow this path, it stops calculating and just goes along - until reaching the next room, when the procedure is repeated.<br><br>One thing that was difficult in this was that when the creature is leaving the room where it&#039;s destination is, the destination needs to be translated from &quot;tile space&quot; to &quot;abstract node world-map space&quot;. I solved this by partly using the quick connectivity check I threw together a couple of days ago, partly just checking straight distances to doors. It has been working OK, but the connectivity check is super expensive, so I&#039;m thinking about more optimal solutions. No noticeable hickup though, so it might work just fine.
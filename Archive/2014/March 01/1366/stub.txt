JLJac
68

Thank you very much for the help and the reassurance :D <br><br>Embarrassingly I&#039;m unable to repeat the bug... Sorry <img src="https://web.archive.org/web/20150101203245im_/http://forums.tigsource.com/Smileys/derek/sad.gif" alt="Sad" border="0"> Probably it was just a screw up on my side...<br><br>Here&#039;s a more interesting issue:<br><br>Futile has something called &quot;containers&quot;, basically the same as movieClips in flash - they&#039;re sprites that can have other sprites in them, and they can be nested in each other. I&#039;ll be using those for layering my graphics, and also I might use the nesting because that would make it possible to do cool stuff like fade out the entire HUD with just one line of code. <br><br>When adding sprites, I need to reference what container to add it to. So I use a &quot;global&quot; array that&#039;s a property of the main game instance in order to keep track of them. An object can say, for example, &quot;add this sprite to container 3&quot;. It looks like this in my code:<br><div class="codeheader">Code:</div><div class="code">tpGame.SpriteLayers[2].AddChild(spr);&nbsp; </div><br>Here&#039;s the fun part: Ideally, I don&#039;t want a linear array of layers, but a tree-like array, reflecting the nested containers. <br><div class="codeheader">Code:</div><div class="code">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |Game Graphics -----&nbsp; ForeGround&nbsp; &nbsp; &nbsp; &nbsp; |Explosions<br>Main Container -------&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |HUD&nbsp; ---| HUD1&nbsp; &nbsp; &nbsp; | Game Layer ------ Players<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| HUD2&nbsp; &nbsp; &nbsp; |<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;| Background --- Bkg Image<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|Bkg Sprites<br></div><br>It seems like a solution like this would make more sense than having a document by the side where you have a note that says &quot;item 6 in the list is the Background sprites layer&quot; - that&#039;s not very elegant. <br><br>In the best scenario possible, I&#039;d want to be able to write something like:<br><div class="codeheader">Code:</div><div class="code">tpGame.SpriteLayers.GameGraphics.Background.BkgSprites.AddChild(spr);<br></div>And I know that this can be accomplished by defining a class for each and every intersection in the tree, but if elegance is what I&#039;m after, that doesn&#039;t seem like the way to go XD<br><br>Is there any way to create a tree-like structure like this? Note that all the branches can be different lengths. 
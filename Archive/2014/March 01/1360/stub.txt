JLJac
68

dancing dead, I&#039;ll try your approach and let you know if it worked!<br><br>Juan, thanks! Sorry!<br><br>Weird C# problems that I can&#039;t understand:<br><br>I wanted to do a thing where one thing was affected by another thing more the closer it was to it. I tried to solve it like this:<br><br><div class="codeheader">Code:</div><div class="code">float frc = (150f - Vector2.Distance(obj1pos, obj2pos))/150f;<br>frc = Mathf.Clamp(frc, 0f, 1f);</div><br>Easy enough, no? frc decreases linearly with distance, at distance &gt; 150 frc is zero. But no! For some reason this returned small values slightly above zero, <i>never</i> a clean zero. Even if the distance is greater than 150 (which would mean that the value I try to Clamp becomes negative, and therefor should be set to 0.0, in my opinion). I even tried removing the Clamp and doing an old school if statement, with the same weird output. If I tell it to log just the first line in my example, I get a reasonable number such as -72.423. But after trying to restrict it, it&#039;s never a clean zero. What&#039;s going on here!? <br><br>Other problem: I wanted to generate a color at random, but I only wanted fully saturated colors and never white or black. My solution was to have one of the rgb values be full, one empty, and one a random from 0.0 to 1.0. My attempt at a solution was something like this:<br><br><div class="codeheader">Code:</div><div class="code">colorsL = new List&lt;float&gt;();<br>colorsL.Add(0f);<br>colorsL.Add(1f);<br>colorsL.Add(Random.value);<br><br>playerColor = new Color(0f, 0f, 0f);<br><br>int getPos = Random.Range(0,2);<br>playerColor.r = colorsL[getPos];<br>colorsL.removeAt(getPos);<br><br>getPos = Random.Range(0,1);<br>playerColor.g = colorsL[getPos];<br>colorsL.removeAt(getPos);<br><br>playerColor.b = colorsL[0];<br></div><br>So basically I create a list which holds three values, Zero, One and Random. Then I pick one of these at random, assign it to the red parameter, delete it. Pick one of the remaining two, assign it to the green parameter, delete it. The one that&#039;s left goes into the blue parameter.<br><br>For some reason this would never give the entire spectrum of colors, blue was always full if I remember correctly. I changed it for a switch case on a random number, and wrote 6 cases manually, but that seems like a super hacky solution. What was I doing wrong?<br><br>Edit: Bonus question! In the original tutorial I did, all the parameters in classes where declared as public. I continued doing this by default. Is this practice good/bad? I noticed that you can simply not write &quot;public&quot; and it will still run just fine. From my understanding &quot;public&quot; makes the variable changeable from outside the class, and it seems more self-contained and object oriented to keep that to a minimum, perhaps?
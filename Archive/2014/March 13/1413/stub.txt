JLJac
70

@eigenboom: Yeah, that&#039;s a good point - object oriented programming is a tool, not an orthodox religion. For the items it might very well be better to use an in-class solution rather than messing around with a bazillion text files and classes. The limbs have very different behaviors though, the only thing they have in common is basically a &quot;position&quot; parameter and a &quot;owner&quot; parameter, so there the inheritance seems like a good fit. A quick question on that note: The limbs will all have Owners, but some of them will have Owners that are slugcats, some lizards, etc. This makes it difficult for me to decide what to declare the Owner parameter as - if I declare it as a Creature I&#039;ll have to go &quot;(owner as Lizard)&quot; for every single line in the lizard arm, for example, which seems unnecessary as I know that a lizard arm will only be owned by a Lizard. Any ideas for this? Should I declare the Owner variable in the child classes rather than in BodyPart? That seems weird as all of them <i>will </i>have an Owner.<br><br>For the items, maybe a clean solution would be <a href="https://web.archive.org/web/20150101111809/http://gameprogrammingpatterns.com/state.html" target="_blank">state classes?</a> Has anyone played with those in c#? I get the general idea, but I have a hard time translating the examples to c# syntax. How do you make this thing work? Do you create an instance of each state class at startup, and have a currentState variable that points to the one that&#039;s currently active? In that case, what would you declare currentState as, as all the states have different classes? If anyone has some more on this design pattern in c# I&#039;d be happy, as I plan to use it for the different &quot;animations&quot; for the creatures as well <img src="https://web.archive.org/web/20150101111809im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"><br><br>@Juan: Thanks! Looked up interfaces, and made a (somewhat messy, but working) implementation in Space Worms. It&#039;s very useful! <br><br>Other question: In the old code, the game held a lot of lists of objects by type in order to be able to easily access them. So for example, I&#039;d have a CreaturesL, a LizardsL, a PlayersL, a SlugcatsL, a PupsL, etc. A player, for example, would appear both in PlayersL and in SlugcatsL, where the latter would also have references to all the pups. This was very useful (sometimes I wanted to check something against players only, and would then repeat through PlayersL, sometimes I wanted to check something against pups and players, and would then use SlugcatsL) but I have a hunch it might be considered impure programming-wise. Is that hunch correct, or can I go ahead with my many not-mutually-exclusive lists?<br><br>Other other question: For the Game, Hunt, ShortcutHandler instances, should I use singletons? Those seem to be very taboo?
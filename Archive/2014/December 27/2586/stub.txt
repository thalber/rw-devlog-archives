JLJac
129

<div class="quoteheader"><a href="https://web.archive.org/web/20141228084952/http://forums.tigsource.com/index.php?topic=25183.msg1095069#msg1095069">Quote from: dancing_dead on December 26, 2014, 01:42:06 PM</a></div><div class="quote">throw encapsulation out the window, make everything in lizardAI public, implement the method HowImportantIsThisGuy in the CreatureLooker itself, using the freely available contents of the LizardAI as the parent AI container. this way every helper method for particular AI modules can be implemented in the modules themselves, provided they have a reference to the AI container and that container allows these modules to access its data.<br><br>might not be the prettiest way, if you&#039;re making a well encapsulated library or smth, but, fortunately, you&#039;re not.<br></div>Hmmmm encapsulation is slowly but surely making its way out said window either way, but I don&#039;t necessarily want to speed that process up. At this point the project is becoming big and complex to the point where I have no chance to wrap my head around all of it at once, and the somewhat encapsulated modular design helps me with that. It enables me to think like &quot;OK, this is the path finder. The code I look at here should find paths, nothing else.&quot; <br><br>For example, when the path finder work it asks the lizard AI about a travel preference for each tile. If the tile is close to a creature the lizard is scared of the AI will return a higher value, and the path finder will subsequently not favor paths through that area. Right now the path finder calls a method on the AI for each tile it evaluates ~ &quot;what do you think about this tile? And this tile?&quot; The AI can then look at the tiles one by one and answer what it thinks of them. Super many things factor in to that evaluation. The AI asks the Threat Tracker about perceived threats, then it asks the Tracker about where those threatening creatures are assumed to be, then it compares to the tile being evaluated. How scared the lizard is of rain at the moment is factored in, as well as how scared it is in general, if it&#039;s angry, etc etc.<br><br>If I threw encapsulation out the window and had all of that code happen <i>in the pathfinder script</i> the mess would be infinite. Especially as different species of creatures do these evaluations differently - I&#039;d have to switch case on creature type, cast to the class I want, and then have pages upon pages of code in the same text file, haha~<br><br>Same with the CreatureLooker, and all the other modules I have. Some of their behaviors are shared, and those obviously belong in the actual class, but some of the behavior is creature specific, and I need some neat way to handle that.<br><br>So some degree of encapsulation is pretty much required at this point, or everything will spiral into insanity. I&#039;d just like to know from you guys what degree of encapsulation you think is reasonable/comfortable, and how to best work with systems like that? Is there some go-to design pattern for two way communication between decently encapsulated modules?
JLJac
107

Today&#039;s update isn&#039;t very exciting, so instead you get a ramble on game design! Yay!<br><br>I think all of these points on dragging are totally valid. In the end I think it wouldn&#039;t do thaaaat much of a difference, because it&#039;s a very slow and deliberate action in a very chaotic game. Any cunning plan like that is pretty much doomed. It&#039;s like that guy who&#039;d try to punch a crate across half the map to block a door in a halo match - cool idea bro, but a million rockets and grenades and burning vehicles are going to wreck your day, and the rest of the game plays in 100 times the pace of your plan and will already have played out when you get there. Rain World is about planning and analyzing, but it&#039;s mostly on a 0.5-5 second scale rather than up in the twenties, or minutes. There are some minute-scale decisions in single player, such as &quot;which area will I go to&quot;, but once those are taken the sub-goals will be much smaller chunks of decision making. <br><br>Also the game is fairly unpredictable. I know I&#039;ve mentioned this as an issue before (I want the player to be able to feel at least somewhat in control of a situation) and I will work on it, but on a bigger scale it&#039;s such an integral part of the game design that it will just have to be dealt with. Which is something I don&#039;t necessarily view as a bad thing, because I think fun stems from a good combination of random and controllable. Think about tetris, it&#039;s random what blocks you get, but how they behave is completely deterministic. Rain World has a similar dichotomy I think, what creatures are where is hard to know, but how they behave and interact can be learnt and manipulated (or, it will be like that, once I clean out some of the weirdness and randomness). <br><br>I&#039;m kind of aligned with fizmats idea of animal-level and human-level intelligence here, and that kind of reflects what I mentioned above - the slugcat is intelligent in split second decisions, but doesn&#039;t necessarily prepare elaborate traps. Definitely not crafting. That said though, the slugcat <i>is </i>the player&#039;s avatar, and whatever the player is able to think of the player is able to think of, you can&#039;t get in the way of that.<br><br>The third factor is something I think of as &quot;world self containedness&quot;. Hmmmm examples. A self contained game world would be Pac Man. In pac man the little pac man creatures are what they are, and they are what they do. Ghosts chase, pac man eats. You don&#039;t really question why they don&#039;t do anything else, because they <i>are </i>what they do and all they are is what they do. You don&#039;t ask yourself why pac man doesn&#039;t try to talk to the ghosts for example, that&#039;s just not in the scope of that world. A non-self contained game world would be GTA. GTA attempts to mimic the real world, and thus its <i>canon </i>suggests more possibilities than its <i>mechanics </i>can provide. In GTA you can find yourself thinking &quot;god why doesn&#039;t he just push the box with his hands&quot; or &quot;if I just had the option to say this thing to this character I could&#039;ve solved this mess&quot; or &quot;why can&#039;t I open the trunk of the car! I want to open the trunk!&quot; or an infinite amount of other things. GTA suggests a world where you could become a painter and spend your days painting abstract art (namely our world, where you can do that) but it doesn&#039;t provide the mechanics. Pac Man suggest a world where only eating is possible, and eating is also what you do.<br><br>I get the point of both ideas, when doing something movie-inspired like GTA the latter option is obviously preferable. But personally I prefer self-contained worlds. A computer game object is only its actions, and in a self contained game world it should ideally only represent those actions as well. Pac man eats, ghosts chase. I have a bit more technical resources than pac man, so I can make a slightly more complex world, but I want that same tightness of design. I want my creatures to be the things they do, and to be pretty much only that. The slugcat is quick, jumpy, climby, stealthy, nervous, always on the move, hunting and desperate to stay alive at the same time. The lizard is lazy and slow until it spots prey, then suddenly determined and persistent, making every single move in order to achieve the goal of reaching the other creature. The fly is a bit goofy, concentrated on its own business which is kind of obscure what it is, but suddenly panicking in order to preserve itself, especially when the behavior is amplified throughout a group. <br><br>Those concepts are realized through the actions - jumping, climbing, running, flying, chasing. The animation is then intended to amplify these hinted personalities further, but is always based on the actual game-relevant interactions. The slugcat for example has a nervous gaze switching from object to object, similar to the personality its behavior suggests - never really focused on a goal, but always determining the situation in this very now. &quot;Was I one millimeter from death half a second ago? That&#039;s irrelevant now, because now I have a 0.3 second window to catch this prey, so I better give it a shot!&quot; The lizard on the contrary is goal focused - staring down its target with tunnel vision, only giving other creatures a quick glance as they appear in order to make a swift calculation whether it might be worth it to switch target. <br><br>The idea is that interactions added should be in line with these personalities - further defining the creature using the things it <i>does </i>as building blocks. The slugcat shouldn&#039;t play basket ball, craft a gun or run for president. It would be out of character. And worse, it would break the self-containedness. If you can craft a gun, why can&#039;t you make a car? Suddenly it becomes obvious that the limitation is not the edge of this <i>world</i>, but of what I could be bothered to code when making this <i>game</i>. Willing suspension of disbelief punctured!<br><br>Dragging a corpse as a bait? Maybe! It could definitely be a part of the slugcat skill set. It&#039;s not vastly out of character, just maybe a little, as it suggests thinking several minutes ahead, which we haven&#039;t seen much of so far. But if it does add to the game, or if it could be done as a more on-the-spot action rather than a lengthy and deliberate one, it could even be a welcome nudge in a new direction for the character. Giving it more depth! But, as you can tell if you made it this far, there are several things to take into consideration when adding something like this.<br><br>That&#039;s what&#039;s going on in my head when I think about what new features might be like!<br><br><b>Update 335</b><br>Sent an email to UnityVS guys and got an answer that they simply don&#039;t support break on exception, so it wasn&#039;t that weird after all&nbsp; <img src="https://web.archive.org/web/20141227133859im_/http://forums.tigsource.com/Smileys/derek/tired.gif" alt="Tired" border="0"><br><br>In other news, creatures carrying other creatures (and inanimate objects) through abstract space, into abstract space, and out of abstract space, is now done! It&#039;s actually a pretty huge step, but it&#039;s not really the gifable kind - it looks like leaving a room and then when you go back into it everything is where it was and nothing has happened.&nbsp; <br><img src="https://web.archive.org/web/20141227133859im_/http://forums.tigsource.com/Smileys/derek/hand-shake-l.gif" alt="Hand Shake Left" border="0">&nbsp; <img src="https://web.archive.org/web/20141227133859im_/http://forums.tigsource.com/Smileys/derek/cheesy.gif" alt="Cheesy" border="0"> <img src="https://web.archive.org/web/20141227133859im_/http://forums.tigsource.com/Smileys/derek/hand-shake-r.gif" alt="Hand Shake Right" border="0"><br><br>The system supports carrying of creatures carrying creatures carrying creatures etc. So you might see a lizard carrying a lizard carrying a slugcat carrying two flies hahaha! <br><br>There was some trickyness to this, because when a creature carrying another creature exits a room, it pulls that creature with it. This means that I wasn&#039;t able to resort to the classical iterate-over-the-list-backwards solution when updating creatures in rooms, because they were not certain to only remove themselves, but could pull any random chunk of other creatures with them from both before and after themselves in the list. You code people, if you could give my solution a quick glance and tell me if it looks OK?<br><br><div class="codeheader">Code:</div><div class="code">&nbsp; &nbsp; private List&lt;AbstractWorldEntity&gt; entities;<br>&nbsp; &nbsp; private bool evenUpdate;<br>&nbsp; &nbsp; private int roomIndex;<br><br>&nbsp; &nbsp; public void Update(int timePassed)<br>&nbsp; &nbsp; {<br>&nbsp; &nbsp; &nbsp; &nbsp; evenUpdate = !evenUpdate;<br><br>&nbsp; &nbsp; &nbsp; &nbsp; bool allEntetiesUpdated = false;<br><br>&nbsp; &nbsp; &nbsp; &nbsp; while (!allEntetiesUpdated) {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; allEntetiesUpdated = true;<br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; foreach (AbstractWorldEntity ent in entities) if (ent.evenUpdate != evenUpdate) {<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ent.evenUpdate = evenUpdate;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ent.Update(timePassed);<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (ent.pos.room != roomIndex) { allEntetiesUpdated = false; break; }<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp; }<br></div><br>This is in the room class. What I want to do is update each entity in entities <i>once</i>, but what I need to account for is that the update call might remove the entity and any number of other entities from the list.<br><br>In English, my solution is this: I iterate over the entities list and update each entity, setting a bool in them so I know I&#039;ve updated them this frame. After each, I check if it&#039;s still in this room, or if it has moved out. If it has moved out, I break the loop, and start it all over again, once again iterating over all the entities. But because those already updated has the bool set, they don&#039;t get a second update command. I repeat this until I have been able to iterate over the entire list without any breaks. <br><br>Should about do it, right? Let me know if there&#039;s any problem I didn&#039;t think of.
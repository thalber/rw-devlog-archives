JLJac
90

Hahaha yeah most definitely! If there&#039;s anything I love more than programming path finding algorithms, that has got to be writing about programming path finding algorithms&nbsp; <img src="https://web.archive.org/web/20190719154654im_/https://forums.tigsource.com/Smileys/derek/cheesy.gif" alt="Cheesy" border="0"><br><br>And on that note -<br><br><b>Update 268</b><br>Yo dawg, today I put a smaller path finding algorithm in my path finding algorithm... to... Let me explain!<br><br>The basis of the rain world path finding method is that as one path is being followed, the next is being calculated. This means that the paths are calculated not within a single frame, but over the course of several, and that the creatures are able to follow moving targets. How it works is pretty simple; the path finding algorithm works its way out from the <i>goal </i>as a flood fill. When it reaches the creature, the creature starts following the path. Once the creature is following the path, a path to the next goal position (wherever the goal has now moved to) will start to be calculated. It&#039;s assumed that the new goal will be somewhat close to the last goal, so the creature will continue to follow the last path as the new is being calculated. The creature will never follow a perfectly updated path, but it will have a reasonably recent one to go by, and it is quite a lot easier on the processor as an entire new path doesn&#039;t need to be calculated every time the goal moves. <br><br>I think of this as a path finding algorithm that&#039;s optimized for having several creatures chasing <i>moving </i>targets. Contrary to an RTS rain world will have almost only moving targets.<br><br>Ok, with this in mind, take a look at this. Notice how each time a path connects with the creature, the next one is started? <br><br><img src="https://web.archive.org/web/20190719154654im_/http://imgwiz.com/images/2014/07/09/FuRhQ.gif" alt="" border="0"><br><br>This is done pretty simply. Each time the mouse is assigned as destination, but it&#039;s actually saved as a &quot;nextDestination&quot; variable. When <i>the creature is following the most recent path</i> or the <i>path has exhausted all its options and knows its unable to reach the creature</i> a new path will be initiated, with nextDestination as destination. You following? In the gif above we see a lot of the former and none of the latter.<br><br>So, there&#039;s a problem with this system. Say that the creature is in a small enclosed room. The path finder is told to find its way to a position somewhere out in the big world outside the room. A new path will be initiated, and the path finder will chug away at the vast sea of tiles in the world, without finding a way into the room. <br><br>Now the AI changes its mind, and the path finding goal is put <i>inside </i>the small room again. Notice the problem? No new path will be initiated inside the room, because the creature isn&#039;t following the most recent path, which is still searching all over the world for a way to get to the creature, and the path won&#039;t have exhausted every option in a loooong while, as it has to look at every tile in the world first.<br><br>So, the solution is to just assign a new path every time the goal moves, right? Nah, that won&#039;t work. If the goal moves, as it will when following a creature, there will be a new path each frame, and none of them will have time to reach the pathing creature. <br><br>This is where the path finder in the path finder comes into play. It&#039;s a super quick little path finder that maps whether one place is close and reachable from another place. So, when assigning a new destination, I check if this new destination is close to the old destination. If so, I simply do as first described, save it as nextDestination. If it is not, however, I scrap the old path and start a new one. The old one probably wasn&#039;t going to help either way.<br><br>So, in the scenario, this would mean that as the goal is moved into the small room again, it&#039;s quickly determined that this area is enclosed from the last destination - and the last path will be discarded and leave way for a new one, inside the small room. The creature will appear as more alert, as it will adapt to the new situation quicker than if it would&#039;ve had to search the entire world for a path to a place it didn&#039;t even want to go anymore first.<br><br>Whew. Told you path finding was gonna get crazy!<br><br>In other news, I&#039;ve enabled lizards to enter short cuts, and brought some of the path finding stuff together and had it work simultaneously. So, now we for example have the &quot;pathing through places I know I can&#039;t actually go&quot; stuff working simultaneously with all the other stuff, etc. The different elements tend to not get along very well at first when put together, but I think I&#039;ve made it work. Have some ideas for re-structuring stuff though... we&#039;ll see.<br><br>Also been developing some ideas about how off screen creatures moving about are going to work. Off screen creatures are probably going to be a little... schr√∂dinger&#039;s lizards, in that they&#039;ll be in sort of undefined states until they need to be realized... It&#039;s going to be interesting!<br>
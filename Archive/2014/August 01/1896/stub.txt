JLJac
94

Thanks guys, awesome input! All of your takes on the issue are really valuable to me, and it&#039;s good to see that you have some different angles on the problem. I&#039;m taking it all in.<br><br><b>Update 281</b><br>I took a little step back and looked at the big picture. After spending some time with my notebook and a pen rather than staring at these pixels I managed to pin a few key points down.<br><br>First of all, the core question and its (as of now) three answers:<br><br><i><b>What is the purpose of the AI in Rain World?</b></i><br>&nbsp;* Challenge<br>&nbsp;* Flavor<br>&nbsp;* Trickability<br><br><br><span style="text-decoration: underline;">Challenge</span> - The AI should add to the challenge to keep you at the edge of your seat while playing. However, I&#039;m going to dismiss this point entirely, because I have a million other parameters that affect challenge and are much easier to tune. The movement speed of the enemy, the range of its senses, the amount of enemies are all such parameters. <br><br><span style="text-decoration: underline;">Flavor</span> - The whole purpose of the project is to simulate a world that feels exotic and alive. Creatures&#039; behaviors are a huge part of that. I&#039;m not too concerned about this one either though - I trust my gut feeling when it comes to this aspect, and I think most of it is in the details (animation etc) rather than the overarching architecture. In short, I&#039;m not <i>worried </i>about this aspect, it&#039;s going to be cool no matter what system I use.<br><br><span style="text-decoration: underline;">Trickability</span> - This is the thing - the problem that needs to be solved. The idea is that you want <i>the AI to be smart enough so that the player can trick it and get satisfaction out of having outsmarted it.</i> When it comes to Rain World AI, this is the holy grail I&#039;m pursuing. Every amount of complexity on the AI&#039;s part should generally fall back on this; this is <i>why </i>the AI is complex. An NPC that just moves towards a target on visual contact isn&#039;t smart enough to be tricked. RW AI needs to be smart enough to come up with a simple plan and carry it through, so that you can have anticipated that simple plan and act accordingly.<br><br><hr><br>I&#039;ve identified a few ways to achieve trickability:<br><br><span style="text-decoration: underline;">Communication/Clarity</span> - It needs to be clear what the intent and purpose of the AI character is. You need to know what it&#039;s currently up to, and if it changes its behavior, that needs to be clear too. Some of this can be communicated by animation and sound, and is thus not really an AI concern. The simplest, solidest solution for this problem would be to visualize the state of the AI with HUD somehow. For example I&#039;ve seen some splinter cell game where a ghost of the player lingers where the enemy believe you to be. You could also have eye beams representing visual contact etc. I don&#039;t like these solutions, as I try to minimize HUD in general, and because it feels like cheating to see what&#039;s going on inside the enemy&#039;s head. What you look at on the screen should just be the physical reality of the game world - you are in fact already cheating by being able to see through walls, which no other creature can. So this one is going to be an issue. One thing I&#039;ve been thinking about is that flickering between behaviors should really be avoided in order to achieve this. The creature needs to commit to an action in order for the player to be able to see what it&#039;s up to.<br><br><span style="text-decoration: underline;">Predictability</span> - It&#039;s crucial that the behavior is predictable in order for your cunning plans to follow through. You should be able to know what each enemy is going to do in each situation once you&#039;ve gotten to know them. If they are too predictable they might appear as soulless machines, but I think I know of a way to fix that. If their idle behaviors, when they are not pursuing or being pursued, is more random, that will bring a little randomization into the mix without hurting the predictability of the actual gameplay-relevant behaviors. In their idle states they will also move slower with less urgency, giving the player some time to react to an unpredictable move.<br><br><span style="text-decoration: underline;">Sufficient complexity</span> - As stated, a creature that is too dumb can&#039;t be tricked. A box that just moves towards you can be made to fall down a pit, but you don&#039;t really feel like you&#039;ve outsmarted anything. If the box tries to move around the pit, but you&#039;re one step ahead and have already prepared an ambush or something along that route, you suddenly have a war of minds (albeit a very uneven one) and that&#039;s much more fun. However, if the AI is <i>too </i>smart, you will just spot it as it&#039;s traversing your room on its two hour quest to collect parts for building a rocket or something, and when you don&#039;t have the ability to ask it what its ultimate goal is, it&#039;s just going to appear as if it&#039;s moving about at random. So, more complex isn&#039;t per definition better - especially if the complexity gets way ahead of item #1, the communication aspect.<br><br><span style="text-decoration: underline;">Interactions</span> - There needs to be tools at hand when tricking the enemy. In the old build, a creature could pretty much only move about and eat or get eaten. There needs to be a few more interactions to achieve trickability. Something to lure creatures to a specific location. Something to stun them. Some ability, such as armor or the like, that they can be robbed of through a cunning plan. These are not strictly AI issues, as they encompass larger game design choices, but they will have corresponding AI behaviors and might deserve to be mentioned here.<br><br><hr><br>So that&#039;s how far I&#039;ve gotten on my thoughts of why Trickability is my main goal, and how to achieve it. The next page in my notebook has a simple little observation about the kind of environment this AI will live in. <br><br>Contrary to in many games, Rain World creatures will encounter extremely few of what I call &quot;Key/Door Puzzles&quot;. That is, actions that are locked behind other actions, such as &quot;You can&#039;t get to behind the door until you&#039;ve unlocked the door. You can&#039;t unlock the door until you have the key.&quot; <br><br>The Rain World NPS&#039;s are generally animal-type creatures, that don&#039;t use much tools or items. The Rain World maps are generally open - they don&#039;t have locked doors that can be opened with items or switches. This means that there are extremely few situations where something is possible to do if something else is done first. Categorically, every action is either possible or not possible, always. Either I can get up on that ledge, or I can&#039;t. Either I can hunt that prey, or I&#039;m speared to a wall. Among the possible actions, however, there is a wild variation of desirability. <br><br>This means that Rain World AI is about<br><br><span style="text-decoration: underline;">Decision Making</span>, not <span style="text-decoration: underline;">Problem Solving</span><br><br>This notion has me currently leaning in <a href="https://web.archive.org/web/20141223101650/http://gdcvault.com/play/1012410/Improving-AI-Decision-Modeling-Through" target="_blank">this</a> direction. But the behavior trees seem pretty awesome too haha! I seriously don&#039;t know if anyone made it all the way through this monster of a post, but either way it was good to get my mind sorted out. As always, all your input is very welome!&nbsp; <img src="https://web.archive.org/web/20141223101650im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0">
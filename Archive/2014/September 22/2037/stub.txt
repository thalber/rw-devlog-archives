JLJac
101

<b>Update 312</b><br>Some pretty interesting parts have started moving into place today. First and foremost, a framework for relationships between species. A relationship is a one-way link between one Creature Template and another, consisting of a type enumerator and a float signifying intensity. Currently I have Ignore, Eat, Afraid as possible relationship types, but there are endless possibilities such as AggressiveRivalry, Annoyed, Symbiotic, KillForFun, Cautious, Territorial, and so on. These are the threads that will hold this food web together. <br><br>As you might remember the Creature Templates have some inheritance between them - for example there exists a Lizard template that&#039;s never incarnated on a level, but which is an ancestor of all the lizard breeds. I&#039;ve set the relationship system up to flow down through the inheritance tree, and overlap empty (&quot;Ignore&quot;) relationships but never specifically declared relationships. I&#039;ll have you know that I did this with a <i>recursive </i>method! (On declaring a relationship, check all children if they have any relationship to the relationshipee, if not, call the method again but on the child! I only got stack overflow exceptions 5 times setting it up!)<br><br>This means that I can first declare that all lizards should eat slugcats and ignore each other, by addressing the ancestor Lizard object. Then I can create exceptions, like making Green lizards hunt Blue lizards, making Pinks aggressive towards each other, or deciding that Greens should actually run away from slugcats rather than hunt them.<br><br>The really cool part about today though is that I&#039;ve been able to start hooking the AI components to some behavior. Everything was pretty much in place already, so it was very easy to make the lizards actually react to other creatures. As I had planned, it seems like I can create lizard behavior with very little code in the actual lizard AI, as almost everything is outsourced to the different modules. <br><br>So for example there is a Threat Tracker, right? And from today a Prey Tracker as well. The general AI already has a method that is &quot;a creature has been spotted&quot;. So what the lizard AI does is that each time it gets notified about a new creature it checks with the Creature Template Relationships: if the alien creature is prey, it notifies the Prey Tracker - if it&#039;s a threat, the Threat Tracker is notified.<br><br>These modules are then pretty much autonomous, they run their own behaviors alongside the main AI, keeping track of threats and potential prey respectively. Every frame the main AI can <i>ask </i>them, however, for a status report. The Threat Tracker can be asked for a threat level 0-1, and the Prey Tracker can similarly be asked how it estimates the chances of catching its most attractive prey within the next few frames.<br><br>Using these values, the main AI can do a utility based decision - what&#039;s more urgent? If the threat tracker tells me that I&#039;m actually in danger here, perhaps I should activate the Fleeing behavior? The idea here is that these values should be weighted when compared, for example a threat level of 0.3 might be more important than an estimation from the Prey Tracker at 0.7, as self-preservation should be prioritized. Later when more elements are in, the threat of rain could perhaps overshadow the threat of another creature, etc.<br><br>So say that the utility check decides that the current threat level is the most urgent issue - in that case the fleeing behavior is activated. When the fleeing behavior runs, the main AI once again turns to the Threat Tracker, this time asking for specific details on where to run. The Threat Tracker then does its calculations and returns a flight path, while the Prey Tracker can be more passive this particular frame.<br><br>Then there&#039;s of course talk between the modules, all of which is moderated by the main AI. For example the Path Finder will ask the main AI about each tile it handles, whether or not the main AI wants to add some path finding cost to that particular tile. The main AI will then ask other modules, such as the Obstacle Tracker or Threat Tracker, and for example return higher costs to tiles that are perceived as more threatening.<br><br>It all seems to work! A hunter/prey relationship between Green and Blue lizards makes one pursue the other, but both still hunt the player on opportunity, for example. It&#039;s a lot of fun to be able to switch these relationships on an off at a whim. Right now there&#039;s no real interactions in yet, so they can&#039;t bite each other or the like, but it&#039;s still fun to watch them react to each other.<br><br>What&#039;s fun about the AI system is that it seems I have somewhat been able to separate the more technical stuff from the design stuff - out in the modules calculations are done, while in the main AI there are only a few lines of code, but those lines are creative content rather than technical solutions. Using the modules I can quickly and cleanly create behavior that conveys personality, such as cowardice or brute force, rather than solving a lot of technical problems. I&#039;m much looking forward to creating more creatures within this framework!<br><br>All of this is very hardcoded and crude as is, but I soon hope to be able to show you some more sophisticated stuff.
JLJac
90

Happy to hear that! If you want to ask more in-depth questions, feel free!<br><br><b>Update 266</b><br>Now we have inter-room pathing! It actually seems to work! How it works, simplified, summarized:<br><br>1. On loading, a function called a &quot;connectivity mapper&quot; goes over all the rooms. It pretends to be each type of creature in turn, and using that creature&#039;s moves tries to get from <i>every door in the room to every other</i>. If it succeeds, it saves how long and difficult that path was (In room 3, as a Lizard, walking from door 2 to door 3, the path length is 21 tiles and the cost of the path is 321). If the path is impossible to traverse, it saves it as -1.<br><br>2. As a path finding creature is created, it creates a map of path finding cells for each tile of the room its in. It also creates a cell for each exit in each room in the entire game world. This might sound like a lot, but keep in mind that a 10*10 block of tiles holds no less than 400 pathing cells, so all of those exits in the offloaded world are going to be small fry in comparison to the currently occupied room.<br><br>3. The creature creates a network between these cells. For inter-room connections it&#039;s easy, if the room has 2 exits of which 1 leads to another room A and 2 to another room B, the first cell in the room (representing the first exit) should be hooked up to room A. Actually to the cell in room A that represents the exit towards the first room, but I said I&#039;d keep it simple, haha. For connections between cells within the same room, it uses the connectivity maps mentioned before. This way the path finder will be able to know how difficult it&#039;s going to be to traverse a room, but the lengthy calculation is reduced to just a single integer number.<br><br>4. Run the path finding algorithm. The local grid of the currently occupied level is hooked up to the global grid through the room exits. The path finding algorithm is able to treat cells within the room and cells in the abstracted world equally, making it find paths seamlessly throughout the room as well as the world.<br><br><img src="https://web.archive.org/web/20190719154654im_/http://imgwiz.com/images/2014/07/07/A4Cbw.gif" alt="" border="0"><br><br>Finding a way from the bottom of a pit to the platform above, using off-screen rooms. Note that the path finding works from goal to start. The little free-floating cells on the left represent the abstract off-screen world.<br><br>I was once even pleasantly surprised by this when trying it out. I had a room that consisted of two little cells with no connection to each other, but just a connection to the outside world each. The offscreen pathing was able to create a path from one of them to the other through the offscreen levels, but not the other way around. I thought I had found a bug. In fact, one of the rooms that needed to be traversed in order to get between the cells contained a pitfall - dropping down was possible, but not getting back up. I found it fascinating how the very specific architectural traits of a level that to the game didn&#039;t even exist (it had never been loaded in that game session) could have a visible effect in this other room. It really made the world feel like a connected whole!<br><br><br>And, as a bonus, a little bit of path finding madness. The lizard isn&#039;t able to do its &quot;flip over&quot; move that enables it to turn around on a flat floor yet, so instead it proceeds all the way around.<br><br><img src="https://web.archive.org/web/20190719154654im_/http://imgwiz.com/images/2014/07/07/Ed03H.gif" alt="" border="0">
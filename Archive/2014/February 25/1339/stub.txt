JLJac
66

@Rabbit, I&#039;m glad someone except me is also getting something out of this!<br><br>@dancing dead, that&#039;s the method I ended up using! My problem was that I didn&#039;t understand that I could declare a variable without assigning it an instance (&quot;closestObject&quot;), but then I learnt about &quot;null&quot; :D And now I see that in your example, you don&#039;t assign the variable at all! Wow, I&#039;m learning soooo much!<br><br>@Juan, thank you! Alright, fixedUpdate it is. Note though that I use a &quot;buffer&quot; or &quot;time stacker&quot; or whatever you&#039;d call it in order to make my frames happen at consistent intervals (similar to the last method described here <a href="https://web.archive.org/web/20150102024711/http://gameprogrammingpatterns.com/game-loop.html" target="_blank">http://gameprogrammingpatterns.com/game-loop.html</a>) so the difference might not be <i>that </i>significant - it&#039;s not like the game runs faster if there are fewer objects on the screen. But I will check out what it&#039;s like if I split the updates into one game object update cycle and one that&#039;s only for graphics - I like to move the sprites towards an extraploation of the object&#039;s position in order to get a super smooth look on computers that can handle that.<br><br>Random questions of the day:<br><br>You guys mentioned that I could make Unity display stuff without anti aliasing, &quot;pixel&quot; style. If I have an image imported into Unity I think I know where to change this, but Futile runs its own thing with atlases, and I wonder if anyone knows how to change that setting in there?<br><br>Casting, guys. Right now I have a variable called &quot;objectType&quot; for the like for all objects, and whenever I want to grab an object out of a list and do some type-specific stuff to it, I just switch case on objectType and then I cast that mofo as whatever class I know it to be. This basically circumvents the limitation that you have to specify the class of things as you pass them around. I&#039;ve started to learn though, that the annoying limitations are there for my own good (for example I&#039;ve finally actually <i>understood </i>why globals are bad). So my question is - what&#039;s the catch? Why shouldn&#039;t I just cast everything according to an &quot;objectType&quot; variable?<br><br>Global functions can&#039;t be any harm if they don&#039;t access anything outside the parameters they&#039;re fed, right? If I want to make a custom function for something very general like converting degrees to a normalized vector or something, that&#039;s not a problem, right?<br><br>If I want to set the position of an object, I can do either this:<br>pos.x = 400f;<br>pos.y = 200f;<br>Or this:<br>pos = new Vector2(400f, 200f);<br>How come that for the latter one, I have to wastefully create a new instance? What happens to the old instance of &quot;Vector2&quot;, it&#039;s left for garbage collection, right? Is there any alternative that keeps the line count down while at the same time doesn&#039;t waste memory and time by creating a new instance and replacing an old one?
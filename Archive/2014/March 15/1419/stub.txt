JLJac
70

Thanks!<br><br>The reason I used those lists wasn&#039;t mainly optimization, but to make the code cleaner. Instead of looping through all the objects and clutter the loop with conditions, I could just ask for whatever category of object I wanted. <br><br>But maybe with inheritance I could make the same thing work with only one single if statement? Say that I have Player and Pup classes, and they both inherit from the Slugcat class. Players and Pups are in a huge ObjectL list with all object of all different classes, only sharing an interface. I want to get Players and Pups, but nothing else. Could I use the IS keyword and check for Slugcat?<br><br><div class="codeheader">Code:</div><div class="code">for (int i = 0; i &lt; ObjectsL.Count; i++){<br>&nbsp; if (ObjectsL[i] is Slugcat){<br>&nbsp; &nbsp; //do stuff<br>&nbsp; }<br>}<br></div><br>If that would work it&#039;s a solution that&#039;s clean enough <img src="https://web.archive.org/web/20150101111809im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"><br><br><b>Update 219</b><br><br>I&#039;ve been researching the state pattern a bit, as I think I will use this <i>a lot</i> in rain world. In the old code I use switch cases on strings, and I use it for everything. AI states, animations, etc etc. This time around I want to do it properly, using the state pattern, which I feel I really like but haven&#039;t quite pinned down yet.<br><br>I&#039;ve mocked up a little powerup system in Space Worms using the state pattern, and it seems to work well <img src="https://web.archive.org/web/20150101111809im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"><br><br>There are a few things I feel weird about though. For example I&#039;ve declared the state classes <i>inside </i>the Player class, as I think of it as a sub-system of the Player. Is this the way most people roll, or do they have an external text file for that stuff? The Player class is becoming rather big.<br><br>An other thing is that in an example I found, the guy created one instance of each state on start up, and had a currentState variable pointing to which one was active. I have chosen to instead create a new instance of the state when I change it, as it feels weird to have a couple of inactive states hanging around.<br><br>My idea is this, tell me if it&#039;s wrong: If I change state very often, like, every frame, it might be nice to have one instance of each state hanging around and just point to the active one. Because creating and deleting the state instances every frame would generate garbage. On the other hand, if you change state very seldom (say, once in 30 seconds for space worms powerups) you might as well kill and spawn the state instances, for cleanliness&#039; sake. <br><br>For Rain World I don&#039;t quite know which approach I&#039;ll be going with yet. For AI I think it would be really cool to have an instance for each state hang around and be inactive, because then the creature could pick up its behavior where it left off once it goes back to it! Say that a Lizard is doing something, like searching through some tiles, and then it is interrupted by some other behavior, like snapping after annoying flies. With the state pattern and consistent instances, I could go back to the search behavior, and the list of tiles searched would be intact - the lizard could just pick up where it left off, like it had a memory! Totally cool!<br><br>Could maybe combine that with pushdown automata... 
JLJac
58

Paging my question ~<br><br><div class="quoteheader"><a href="https://web.archive.org/web/20150108120825/http://forums.tigsource.com/index.php?topic=25183.msg988234#msg988234">Quote from: JLJac on January 26, 2014, 09:46:56 AM</a></div><div class="quote">I haven&#039;t enabled playing as a lizard, not because it wouldn&#039;t be easily done but because it would be kind of dull - you&#039;d just steer in four directions, no jumping or exciting platforming. I might explore the possibility in the future though <img src="https://web.archive.org/web/20150108120825im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"><br><br>I&#039;m starting to think more seriously about what development environment I should move to, and whether unity is a good idea or not. <br><b>So, ever helpful and supportive community, would you mind throwing your advice this way?</b> I know that we did have some discussion about this earlier, but this time around I&#039;ll actually spell out what I need from the tool I&#039;m moving to:<br><br>* Fairly quick to learn, fairly quick to write in. I need to spend as little time as possible learning the new language, and it can&#039;t be 10 minutes just to define a variable or something like that. Development has to be easy and quick. But...<br><br>* <i>Not </i>drag-and-drop, no-code user interface, pre-defined behaviours, built in physics engines. I have written behaviors for things like collision physics etc already, and built-in engines doing that same stuff would do more damage than good. They&#039;d collide with the behaviors I already have, and make the porting slower by preventing me from doing straight transfers of the solutions I already have. I&#039;d have to solve problems again, rather than just move solutions. Still...<br><br>* <i>Some </i>pre-defined stuff would be great, especially for rendering graphics. Like, rotating, stretching, changing the content of sprites etc. I don&#039;t know what&#039;s common practice, to have some kind of sprite system or to draw everything with some copy pixels like method to the screen each frame? In either case it would be great if rotating etc would be as easy as possible. Also, drawing simple vector graphics with b√©zier curves.<br><br>* Other than that, I would prefer some pre-defined stuff for strictly technical tasks such as getting keyboard input, setting screen resolution, reading/writing to external files etc. That kind of stuff is not what I&#039;m interested in, and the less time I spend making the screen resolution reset code work on different computers or whatever, the better. <br><br>* Good debugging. In director I can pause and look at the actual value of every specific variable, track variables in a window so I can see them change in real time, etc. When I&#039;ve been working in Adobe Flash I haven&#039;t found that stuff, and have had to rely only of the trace function for all that, which has been frustrating. I need better than a trace function.<br><br>* Performance! I need to make <i>a lot</i> of calculations each frame, and don&#039;t want any slowdown.<br><br>* A living community and continuous updates. I&#039;m tired of being the last dinosaur alive working on a software that I&#039;m never quite sure will run on the next version of windows. I want the environment and the community that works in it to be alive and healthy. <br><br>So basically, I&#039;m not interested in building everything from the ground up just for the sake of it - I&#039;m super happy with using other peoples&#039; solutions for things like rotating sprites and getting keyboard input. But on the other hand, I don&#039;t want something klick&amp;play-like where I just tick a checkbox saying &quot;platformer movement&quot;, I need to fine tune more and I want to build more myself. Just a good, clean, easy, fast development environment where I build the game with code. Suggestions? Is unity my match?<br></div><br>@JubJub from the looks of it, basically all I&#039;d use would be the 2d graphics stuff, yeah. My friend just suggested C#, SFML + Mono, MonoDevelop, instead, and I&#039;ve been looking up C# and feel like I kind of like it. There are other technical stuff I worry about though, such as memory leaks etc. Maybe Unity would take care about that stuff for me? As said, I&#039;m not thrilled to spend time creating intricate technical solutions for problems that have been solved a thousand times before just for the sake of it, I&#039;d rather work on the game. <br><br>@Christian, that&#039;s exactly how it works. Players compete either in lethal combat or in competitive play (catching the most flies and staying alive) and the lizards hunt them as a &quot;neutral&quot; threat. If you hit the other player with a rock so that s/he is eaten by a lizard, you get a kill.<br><br>@Bandreus, that sounds cool! How does debugging work with that? Are there libraries for doing stuff such as rotating sprites etc? I&#039;m not interested in re-inventing the wheel here. I do have some experience with ActionScript and Javascript, and I think they are pretty much exactly the same as Lingo, so those transitions hasn&#039;t been hard.
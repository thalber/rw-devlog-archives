JLJac
99

<b>Update 303</b><br>Cleaning up in the lizard movement wasn&#039;t as bad as I expected it to be. I&#039;m perhaps not done, but I got some of the worst issues out of the way, and now all (as so far 3) breeds of lizards move with more ease through the environments. <br><br>On popular demand I gave the tail gradients some attention.<br><br><div class="quoteheader"><a href="https://web.archive.org/web/20141228135533/http://forums.tigsource.com/index.php?topic=25183.msg1059364#msg1059364">Quote from: NicoM on September 08, 2014, 03:00:32 PM</a></div><div class="quote">just my thoughts on the tails: why not try a shader that just clamps the gradient by threshold (that makes sense right) so you maintain a gradient over the curve of the tail, but it keeps the chunky look.<br></div>This I don&#039;t get exactly what you mean by? A shader that makes the gradient &quot;banded&quot; with fewer colors? Or a shader that draws the gradient as a circular gradient using the shape of the tail as a mask?<br><br><div class="quoteheader"><a href="https://web.archive.org/web/20141228135533/http://forums.tigsource.com/index.php?topic=25183.msg1059433#msg1059433">Quote from: pnch on September 08, 2014, 07:35:29 PM</a></div><div class="quote">Catching up with this ever-growing devlog is hard! Congrats on that!<br><br>Was going to mention the tail´s gradients looking off to me, when I found there were already comments on that.<br>On the other hand, the gradients on the paws looks great to me, maybe if you just shorten the tail gradient´s span / make it exponential? I can sure see them being fully neon for a couple more pixels at the tip, and then getting to the base color on a more abrupt way, that would be also more consistent with the paws. (Or of course, keep them as you are, since it´s both your game AND awesome.)<br></div>Haha I can imagine! Hope it was fun or informative&nbsp; <img src="https://web.archive.org/web/20141228135533im_/http://forums.tigsource.com/Smileys/derek/cheesy.gif" alt="Cheesy" border="0"> It already is exponential in the old gifs actually, ^3 or ^4 I think.&nbsp; Shortening the span though was a good idea, tried it out and it did look better! The paws are painted with the photoshop brush, which I believe is a gauss curve. Maybe I should calculate one of those... Seems overkill though!<br><br>In the end I restricted the gradient to not cover the entire tail (a little different how much it covers depending on breed), kept it exponential, and also added just a <i>little </i>bit of random noise to the gradient, especially towards the intermediary colors, hoping to approach the slightly grittier look of the photoshop brush painted paws.<br><br><img src="https://web.archive.org/web/20141228135533im_/http://imgwiz.com/images/2014/09/09/En1Od.gif" alt="" border="0"><br><br>And blinking heads! The frequency depends on an excitement parameter in the AI, so you&#039;ll be able to see if they&#039;re idle or up to something by how fast they&#039;re pulsing. Instead of just a sine pulse, this time it&#039;s a sine where 0&lt;y&lt;1 but raised to an exponent, making it so that it does drop to 0, but it&#039;s at high values more than it&#039;s at low ones. This exponent also gets bigger with excitement, meaning that when they&#039;re very calm/almost sleeping the head is dark about as much as it&#039;s bright, but if they&#039;re very excited the head is mostly lit with just quick pulses of black color. I&#039;ll do a comparison some time when there&#039;s more AI to work with. Right now they&#039;re locked at 50% excitement. Basically I figured that it&#039;s more fun to look at color than something dark, and this way I could make them more colorful while keeping the iconic blinking.<br><br>Oh, and the other effort of the day was making lizards able to handle slopes - the one part of them that had been shamefully neglected. When I was at it I also made the &quot;grab for terrain&quot; method of the limb object understand slopes, so now the player will also grab at them correctly when crawling.<br><br>Last for today, <b>I&#039;m asking for some programming advice.</b><br><br>Path finding towards a target is relatively easy. Basically flood fill outwards from the goal, when the fill reaches the player, keep going &quot;downhill&quot; node by node until the goal is reached. <br><br>As I&#039;m closing in on it, I&#039;ve come to realize that &quot;path finding&quot; in order to <i>flee </i>is probably much, much harder. If you just turn your back at the thing you&#039;re fleeing from and leg it you will inevitably end up running in a corner, and you&#039;re an easy snack. If you path towards the closest room exit or something like that, that path might very well take you straight into the arms of your pursuer. And also, how do you know that you even want to go to the other room? If it&#039;s a dead end you&#039;re in a worse pinch when you get there and the pursuer comes after you. And all of this is still just considering one pursuer, if there are two of them and you for example only flee from the closest one, you might very well end up flickering between fleeing from one and the other, and end up eaten by both.<br><br>Are there any special tricks for fleeing AI behavior? <br><br>I did have a pretty solid algorithm for the flies in the old build, but it was very dependent on they being able to go somewhere you weren&#039;t (down in the ground), they weren&#039;t as much fleeing <i>from </i>you as <i><i>to </i></i>the best located refuge. Are there any solid algorithms out there? Do they all depend on managing ridiculously expensive &quot;danger maps&quot; where every tile&#039;s distance to every threat is mapped and need to be re-calculated pretty much every frame?
JLJac
89

<b>Update 259</b><br>I made a little obstacle course consisting of a few rooms to test the path finding in, with a few tricky mazes and other situations I want to try out. Some of the tricky bits are things like having to go through another room in order to get from one place in a room to another, and rooms that have completely non-connected areas that can only be accessed from other rooms. Before I get around to try those things out I have to get creatures moving within the room, though&nbsp; <img src="https://web.archive.org/web/20141219115758im_/http://forums.tigsource.com/Smileys/derek/cheesy.gif" alt="Cheesy" border="0"><br><br>Path finding is very slowly, but also kind of surely, moving forward. Today I made a method that checks if a movement between two tiles is legal. The method is outsourced to the individual creatures, and can take weird preferences such as the lizard&#039;s aversion for moving backwards into account. I don&#039;t quite know if it works yet. It looks like it from the colored dots, but when the lizard is supposed to follow the path it doesn&#039;t really behave as I want it to. <br><br>I gotta say, my biggest concern with this Unity/C# thing is becoming more of an actual problem when doing complicated stuff like this. I still after learning them don&#039;t think my debugging tools can compare to what I had in Director. In Director, whenever it threw and error, it would automatically open the code to the place where it happened, and allow me to look at all the parameters in that object. Here I can just use the debugger to set a stop point, but even then the debugger isn&#039;t half as good. I don&#039;t get a list of every relevant parameter by default, I have to write their names letter by letter in a little box to see their values. If their values are references to objects, I can&#039;t click them to go into <i>that</i> object, which means that if you have an architecture where you divide tasks over many different classes the debugger quickly becomes useless. I can&#039;t even view the contents of an array. There&#039;s no console where I can try little snippets of code, call methods in my objects or ask for parameters to be traced. In Director I could use the console as a calculator (how exactly does the modulus function work, let&#039;s try it quickly in the console) a convenience that I find myself missing. In the end I pretty much only rely on the Debug.Log method for debugging, which clutters my console horribly. Any tips on better debugging equipment?<br><br>From how I understand it I can&#039;t use the Unity debugger, as the objects in the game aren&#039;t Unity objects. Even the profiler doesn&#039;t seem to recognize my different methods, it just puts one fat list item for &quot;Rain World Game&quot;&nbsp; <img src="https://web.archive.org/web/20141219115758im_/http://forums.tigsource.com/Smileys/derek/huh.gif" alt="Huh?" border="0"><br><br>Despite this stuff being slightly frustrating, I&#039;m making progress. I think I&#039;m sacrificing a little bit of performance in the path finding in the sake of making it general - but that&#039;s in line with modern game development from how I&#039;ve understood it. The computers are fast enough, the logistics of writing the code is oftentimes more important.<br><br>That&#039;s the good news though - the pathfinding seems to become very generalized and customizable, more than I had dared to hope for! 
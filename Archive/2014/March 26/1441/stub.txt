JLJac
72

<b>Update 225</b><br>Trudging along... Don&#039;t get me wrong, I&#039;m having a wonderful time, but my ambition to divide the work into manageable chunks is down the drain. My idea was to first convert the player - but in order to work on the player&#039;s movement behaviors I need to be able to save and load a level, and in order for that to happen I need to understand how to handle XML and text files, etc etc etc. <br><br><img src="https://web.archive.org/web/20210123070218im_/http://oi60.tinypic.com/fsz87.jpg" alt="" border="0"><br><br>The biggest convertion push for the player is done though, ie basic terrain interaction. Still have all the behaviors involving poles, and a few other special cases left.<br><br><br>Throwing a few questions out there:<br><br>Currently I&#039;m researching on saving and loading a level from a text file, any general tips on that?<br><br>Right now my tiles (all the little things that populate the 2d array of a room) are classes. Should I go with structs instead? <br><br>If I fetch one property of a struct, and it has other, big, properties, does it pass its heavy value-based self through all the methods used to fetch it?<br>Example:<br><div class="codeheader">Code:</div><div class="code">public struct MyStruct()<br>{<br>public bool verySmallProp;<br>public int[,,,,,,] SUPERBIGPROP;<br>}<br><br>if (object.anotherObject.thirdObject.fetchMyStruct().verySmallProp){//...}<br></div>Is the data of SUPERBIGPROP unnecessarily passed as well, slowing everything down? In that case, would a class be quicker? (Which is, to my understanding, reference based and thus not passed at all)<br>I&#039;m asking because every object is asking the surrounding tiles about their status many many times per frame, so I want that to run as smoothly as possible.<br><br>A tile can have several things on it, such as poles vertically and horizontally, fly hives, etc etc etc. How would you guys store that information? A lot of bools, or a list with tags?
JLJac
94

<b>Update 279</b><br>Big progress today! Finally a lot of lose ends came together. Now we have abstracted creatures working like I intended them to. The best way to do this is probably a list. <br><br>* When an abstract room is realized and there are creatures in it, the creatures will appear in the room in positions suitable to where they are headed. So say that a creature is moving from one exit to another in the room, and has been doing so for 40 ticks when you get in there and see it. A path will be calculated between the exits, and the creature placed at a corresponding distance along the path. This path will also be fed to the path finder, selecting all the cells so that the creature will follow the path immediately from frame 1 as the room is realized.<br><br>* If a creature is abstracted in a room, and doesn&#039;t leave it, its actual tile position will be saved, and used as a starting point for a path as described above. This means that you can abstractize a creature half-way in following a path, and then realize it a little while later, to see it having traversed some of that distance.<br><br>* If a creature is not following a path, but is realized in a room, it will walk around between to that creature accessible tiles randomly for a corresponding amount of repeats, using the creature&#039;s last known position as a starting point. This is meant to place the creature somewhere in an area connected to where it was last seen, further away the longer ago you saw it.<br><br>* If a creature is abstracted while outside of walkable terrain, it will be marked as stuck and unable to move in abstracted mode. <br><br>* On abstraction, creatures save a simple manhattan distance to the closest exit, the one which will be its node in node space. The creature won&#039;t be able to move away from that node until it has been in it a time that corresponds to that distance. This is so that a creature that was half a screen away from an exit won&#039;t be able to pop through it the very next frame after abstraction because the engine thought it was &quot;in that node&quot;.<br><br>* Creatures can be assigned destinations in other rooms, and will move towards them. Every combination of destination in abstract/realized space and creature in abstract/realized space will compute, and the creature is able to pursue a path that goes through both realized and abstracted space. Theoretically it should even be able to traverse a room that&#039;s flickering between realized and abstract, though that&#039;s an extreme case that will most likely never occur in the game. <br><br>I have also been able to do just a tiny bit of performance testing, and it looks very promising. These are for example ~20 creatures passing through the room, and the framerate seems to handle it well.<br><br><img src="https://web.archive.org/web/20141223101650im_/http://imgwiz.com/images/2014/07/30/olbLU.gif" alt="" border="0"><br>(The gif though is captured in 10fps, so you&#039;ll have to take my word for it&nbsp; <img src="https://web.archive.org/web/20141223101650im_/http://forums.tigsource.com/Smileys/derek/tongue.gif" alt="Tongue" border="0"> )<br><br>The whole solution is still throwing a lot of nullreference exceptions and the like, but the general structure seems to be working and I&#039;m excited to squash the last bugs and pack up and move on. Maybe soon I can finally get to actual AI!
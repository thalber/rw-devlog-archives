JLJac
86

<div class="quoteheader"><a href="https://web.archive.org/web/20141223101639/http://forums.tigsource.com/index.php?topic=25183.msg1029268#msg1029268">Quote from: metlslime on June 08, 2014, 11:44:58 AM</a></div><div class="quote">Having watched the video, I think your most jarring transitions are the ones where the two screens have some overlap.&nbsp; For example, 0:10 transition and especially the 0:43 transition. The most comfortable are the ones where the character goes to the full edge of the screen, and then teleports to the opposite edge of a completely new screen.&nbsp; For example at 0:30.&nbsp; This is the traditional &quot;flip screen&quot; behavior that many games have had and that gamers are fairly familiar with.<br><br>Probably what makes the first type bad is that it is unexpected.&nbsp; With the second type, as I approach the edge of the screen as a player I know something has got to happen, since before long I will be off the screen entirely.&nbsp; The player can anticipate the event.&nbsp; And the player knows where to look to find their avatar on the new screen, since there is a consistent behavior.<br><br>Watching the tower ascent starting at 1:00, it actually works pretty well.&nbsp; The rule of predictability is maintained, and the small overlap between the screens (usually it&#039;s a horizontal bar that is visible on both) seems to work well. (Though, the small camera movement right before each camera switch seems unnecessary and weird.)<br><br>However, in my own game I started with flip screen and later added a sliding transition, similar to what one sees in zelda.&nbsp; I feel this is actually superior since the player is able to watch their character the whole time, and there is a short time period where the player input is disabled (during the transition) and this allows players to let go of the controls, or get ready to start moving, after they have already seen the new room briefly.<br><br>Your choice on the last point though, as many good games have used flip screen and players can easily cope with it, as long as it is done in a consistent way.<br></div><br>Very good points all of these, and they generally line up with my experience as I&#039;ve been trying these systems out. I think the best would be to have it switch when you reach the edge of the screen horizontally, because then you expect it to switch. The main problem here is that we&#039;re supposed to support both wide-screen and non-widescreen formats...&nbsp; <img src="https://web.archive.org/web/20141223101639im_/http://forums.tigsource.com/Smileys/derek/whome.gif" alt="Who, Me?" border="0"><br><br><div class="quoteheader"><a href="https://web.archive.org/web/20141223101639/http://forums.tigsource.com/index.php?topic=25183.msg1029314#msg1029314">Quote from: Gimym JIMBERT on June 08, 2014, 03:27:30 PM</a></div><div class="quote">4000 (4096 in fact) isn&#039;t unity limitation, it&#039;s the physical limit of gpu&#039;s shaders, also might not work on all card who don&#039;t accept such large texture. You should look into things like virtual texture techniques to know how to handle arbitrary large texture (amplify use something like that).<br><br>There is certainly way to do it since there is many unity 2d game that does the heavy large large levels. Maybe rendering everything in a single shader is not the best solution? Try to post about it in unity3D forums!<br><br><a href="https://web.archive.org/web/20141223101639/http://forum.unity3d.com/" target="_blank">http://forum.unity3d.com</a><br><br>Set a thread in showcase too, maybe unity themselves will propose to help, it happens.<br></div><div class="quoteheader"><a href="https://web.archive.org/web/20141223101639/http://forums.tigsource.com/index.php?topic=25183.msg1029353#msg1029353">Quote from: Lee on June 08, 2014, 06:16:30 PM</a></div><div class="quote">I was having a problem with an extremely large texture myself once. I was using a big sprite sheet (2080*1280) with 160px*160px pre-rendered 3d sprites, and I bound the whole thing to a single texture using OpenGL, but it wouldn&#039;t work on older computers. So yeah, it&#039;s a GPU thing. The solution was to cut it up into individual textures after loading. Perhaps you should do something similar? 512x512 chunks drawn in a grid?<br></div><br>Yeah, I could just cut it up in smaller chunks. That wouldn&#039;t help with the enormous files size and RAM usage though. Plus the dynamic shadow issue, etc. The situation isn&#039;t really that I <i>can&#039;t</i> make it work (you&#039;ve seen the gif, I did make it work already&nbsp; <img src="https://web.archive.org/web/20141223101639im_/http://forums.tigsource.com/Smileys/derek/wink.gif" alt="Wink" border="0">) as much as that I don&#039;t think it will be worth it. On the one side we have a cool transition, on the other we have a huge work load on the processor, on the gpu, on me, a huge increase in file size and RAM usage, a terrible logistic situation with 30 files per level (or more, if I cut them up), the possibility that the already implemented dynamic shadows would have to go, etc. <br><br>The dynamic shadows are visible all the time - the smooth camera movement would only be visible during very short intervals. It would still chew framerate all the time, though. <br><br><div class="quoteheader"><a href="https://web.archive.org/web/20141223101639/http://forums.tigsource.com/index.php?topic=25183.msg1029353#msg1029353">Quote from: Lee on June 08, 2014, 06:16:30 PM</a></div><div class="quote">That said, 30 layers? H-How? Do you have a single background element, like a chain, on each layer? If so couldn&#039;t you save such things as a sprite and set their position and depth through a map script on load? Or is it more like 10*(texture map+depth map+normal map)?<br></div>Think of it more like a voxel matrix, or a 3D texture, and it makes more sense. Then each screen would be 1400*800*30 pixels. I guess that to most people the game looks very 2D, but if you look closely at some screenshots you&#039;ll notice that on the left side, you can see the inside of the wall, and on the right side too. That&#039;s the perspective in action. So the game is slightly 2.5D, perhaps.<br><br>If I were to make everything separate sprites, the main problem wouldn&#039;t be chains and plants etc (though even those alone wouldn&#039;t really amount to 30, they&#039;d rather be in the hundreds) but the fact that a standard tile is 10 sprites on top of each other. A standard level will have something like 7000 tiles in it, so that&#039;d be 70 000 sprites, chains not counted&nbsp; <img src="https://web.archive.org/web/20141223101639im_/http://forums.tigsource.com/Smileys/derek/epileptic.gif" alt="Epileptic" border="0"> <br><br>Gah, you guys make me want to go back and try to solve this again! I&#039;ll talk to James though, maybe it will get a re-visiting but I should probably make some actual game mechanics before I dive too deep into the cosmetic stuff. In either case this latest big update has brought dynamic level sizes with it, and that will always be a necessary feature, no matter how we chose to display it&nbsp; <img src="https://web.archive.org/web/20141223101639im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"><br><br><hr><br>A quick question to you programming people out there - is there a rule of thumb to what is best, saving data or calculating on the fly?<br><br>Currently I&#039;m working with an AI map, a class that&#039;s attached to a level and which can be asked by AI entities for necessary information concerning specific tiles. Such information could be if the tile is a floor(on top of a solid tile), or if it has any special paths (don&#039;t know what to call them, a special path would be for example &quot;if a creature drops down from this specific climbable tile, it will land on this specific floor tile&quot;). In short, these queries will require asking neighboring tiles for their properties.<br><br>Now I have two options - either I save all this information to the tile map on loading the level, or I calculate it every time I&#039;m asked for it. <br><br>I understand that this basically is a decision between burdening the processor or the RAM, but maybe the burdens would be drastically disproportionate in favor of one solution?
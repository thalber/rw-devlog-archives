JLJac
85

Hi guys! OK, so let me give some more context to all of this.<br><br>Do you remember the parallax thing I wrestled with a few weeks back? That was my attempt to create the very same solution as you guys are suggesting now. In explanation - the camera should snap to certain positions (in order to give the environments some attention and gravity, rather than just having them be something that&#039;s rushing by sonic the hedgehog-style) but it would move smoothly between those positions, and be able to leave them for free movement if necessary.<br><br>Enter the Unity limitations. <br><br>A rain world level is, despite it not being very evident, 30 layers of bitmap graphics, each displayed on top of each other in order to create a slight 3D effect. You might not notice this much, but it&#039;s a huge part of what makes the levels &quot;look good&quot;, and you&#039;d certainly notice if it was swapped out for just a regular flat 2D image.<br><br>My first idea was to store all 30 layers in one single .png, all on top of each other, and have a shader do a raycast through them all. But Unity limits texture height to 4000 (or 8000 if you want to stretch it) pixels, meaning the largest level size would be 4000/30 ~ 130px, and that won&#039;t do. Also the file size would be humongous. Maybe it&#039;s as well I didn&#039;t manage to do it, a million pixels times 30 cycles might very well have blown my computer up, leaving most of Stockholm a smoking crater.<br><br>My workaround, the one with which I achieved that parallax .gif, was to save all the layers in its own .png. This means every level would be 30 files big, a logistic nightmare. Also, the file size, and the fact that all of that data would have to hang out in RAM, made it feel unrealistic as a solution. On top of all this, I was very unsure about how to make the shadows work in such a solution - I would probably have to have each layer draw to some kind of render texture, and that would be 30 full screen copypixels every frame... You see my point here.<br><br>Then I started contemplating different bump mapping-like shader ideas, and the notion to write my own file format for compressed 3D textures... The complexity of those solutions were kind of getting out of hand.<br><br>So this is when I decided that screw it, I&#039;m going to have the dynamic shadows, but I&#039;ll have to pre-bake the levels. The reason why pre-baked levels means fixed camera is that the perspective effect is baked into the 2D image rather than rendered on the fly as in the parallax solution - if the camera moves the lines won&#039;t converge at the horizon as supposed to, and it will become very evident that it&#039;s a 2D image rather than anything else, ruining the illusion of depth. <br><br>About now I started to remember my thinking when working under the pretty bad technical limitations of Director. Back then I was also thinking about a moving camera, but I decided against it. It would eat away at the framerate way too much, forcing me to compromise other parts of the game. I decided that a lot of games had moving cameras, but few had procedural animation and complex AI, so I decided to put my processor cycles and work hours there instead. <br><br>Why would I make a different prioritization now, I thought? If I have this one solution that&#039;s much harsher on the processor, will take me much longer to implement, will make the size of the game much larger, will force me to compromise other parts of the game etc, what would it take for it to be worth it? In the end I think that the features that are actually unique to Rain World, mostly animation and AI, are the ones that deserve all of those resources.<br><br>I know of several platformers that only have fixed screens with hard cuts between them that work perfectly well in my opinion, or have even found a way to stylistically benefit from it. An Untitled Story is one of my old indie favorites that works like that. Maybe if we study those examples, we&#039;ll be able to make this solution feel as natural and work as well as they did? Obviously it will take some trial and error, and obviously most of the awkward experiments I threw together in this build won&#039;t cut it. But I think that if we put the work in to make it work, it will be preferable compared to the free-floating camera which would look soooo cool, but which in the end isn&#039;t really worth it...&nbsp; <img src="https://web.archive.org/web/20141225201517im_/http://forums.tigsource.com/Smileys/derek/huh.gif" alt="Huh?" border="0">
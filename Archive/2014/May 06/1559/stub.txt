JLJac
77

Thanks guys! Hope we can make this dream come true <img src="https://web.archive.org/web/20141230122801im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"><br>And as always Jimbert, thanks super much! That might actually be a viable solution to some of our problems. I&#039;ll give the trial a test run eventually, when I get back to this parallax thing.<br><br>Hahaha Ulillillia is wonderful! I&#039;ve never seen anyone care as little about the actual interactive layer in a 2D game&nbsp; <img src="https://web.archive.org/web/20141230122801im_/http://forums.tigsource.com/Smileys/derek/cheesy.gif" alt="Cheesy" border="0"><br><br><b>Update 133</b><br>Ok, so despite encouragement and tips I&#039;ve still managed to keep out of the parallax hole. Now I&#039;m starting to set up the infra structure for the 2D level graphics instead.<br><br>My current idea is this - encode as much visual information as possible into a texture, and then unpack it with a pixel shader. If you guys want to tell me that&#039;s a horrible inefficient way of going about it, now is the time.<br><br>So, I started by setting up a list of the stuff I need to know for each pixel:<br><br>its color [0-3] (transparent, shadowed, standard, high light)<br><br>its depth [0-29] (Needed to give it the correct fog shade, and later to do the cool dynamic shadows I&#039;m hyped about)<br><br>if it&#039;s lit [bool] (I&#039;ll still pre-bake the light, and save whether or not each pixel is actually lit. If it&#039;s not lit, we can save time in the shader by not doing shadow calculations on it.)<br><br>if it&#039;s a rainbow pixel [bool] (If you check the screenshots you might notice a little oily effect around the edges of stuff - that)<br><br>Whether or not it has an effect color [0-3] (No effect color, effect color1, effect color2, white. You know how some plants and stuff tend to be pink or cyan? That&#039;s this. White is used for the flies&#039; hives.)<br><br>How much of that effect color [0-255] (probably unnecessary resolution here, if I make it 0-50 the gradients would probably still look smooth, given how they&#039;re always on small surfaces)<br><br>Then I started messing around, and realized that all of this information can be stored in a 24bit rgb pixel! With quite a fat margin, I could store a lot more if I wanted to!<br><br>So this is my plan:<br><br><span style="color: red;">Red channel:<br>0-transparent<br><br>1-30 = depths 0-29, color shaded, not lit<br>31-60 = depths 0-29, color mid, not lit<br>61-90 = depths 0-29, color highlight, not lit<br><br>91-120 = depths 0-29, color shaded, lit<br>121-150 = depths 0-29, color mid, lit<br>151-180 = depths 0-29, color highlight, lit</span><br><br><span style="color: green;">Green channel:<br>0 = no effect, not a rainbow pixel<br>1 = level effect color1, not a rainbow pixel<br>2 = level effect color2, not a rainbow pixel<br>3 = white color, not a rainbow pixel<br><br>4 = no effect, rainbow pixel<br>5 = level effect color1, rainbow pixel<br>6 = level effect color2, rainbow pixel<br>7 = white color, rainbow pixel</span><br><br><span style="color: blue;">Blue channel:<br>0-255 amount of effect color</span><br><br>My hope and dream is that the level editor will be able to encode each pixel with this information, save it as a .png, and then a fragment shader in unity will be able to decipher it and color the level dynamically. Tune in tomorrow to see it shattered.<br><br>Unity wizards (like Jimbert!) can you give me a quick heads up on one thing - if I want to feed a shader a palette of something like 12 colors, what&#039;s more efficient? Feeding it as params, or feeding it a tiny little secondary texture where it can pick the colors?<br><br>
JLJac
59

Thanks all!<br>I think I&#039;m leaning C#, I like what I&#039;ve seen of it. But I can use C# with Unity as well, right? Couldn&#039;t I write my game in unity/C#, and basically use almost none of the unity built-in stuff, but instead use unity&#039;s debugging, etc? For those things I want, I could use the stuff JIMBERT listed, and the stuff I want to do myself I can do myself. And get the multi platform stuff as well...?<br><br>I won&#039;t move to XNA, because I don&#039;t want to move from one dead language to another. <br><br>Noogai03, why do you hate sfml? Is it unable to do stuff, or is it just personal preference?<br><br>In the end, I think what I will do is to download 2 or 3 of them, give them a day or two each, and try them out. Mocking up pong or something. But it&#039;d be nice to narrow down the alternatives so these trials can eat away as little as possible from actual development time.<br><br><br><br>One of the things I&#039;ve always wanted to have in Rain World is dynamic shadows. Seeing your shadow play over the objects in the background would do soooo much for immersion, because suddenly these things would not just be a flat background image, they&#039;d be part of the same world as you. I&#039;m having ideas about how to implement this, and would like to hear what you guys think about the ideas in relation to the choice of development tool.<br><br><b>Doing it for real</b><br>Currently a Rain World level consists of 30 layers of graphics, of which the first 5 are baked together into a foreground image (in front of game sprites) and the remaining 25 are baked together into a background (behind game sprites).<br><br>What if I didn&#039;t paste all these together, but kept them as 30 separate sprites in the game? And had them all cast shadows on each other, in real time. Then it would be as simple as implementing the sprite layer as one of them, between #5 and #6. <br><br>Maybe shadow calculation could be done as it currently is in the level editor, with a &quot;light image&quot; which is used as a mask for each layer to decide where it uses the sun/shade palettes, and to which each layer adds its silhouette in black so as to cast a shadow on layers behind. But each frame, rather than in a minute long rendering process. <br><br><b>Built-in dynamic light stuff</b><br>Or maybe there is some kind of built in shader for this kind of stuff in for example unity, that runs much faster? In that case, would it work with my resolution, no anti-aliasing, exactly the colors I want etc?<br><br><b>Depth map light</b><br>This one is really theoretical. I save a depth map for all pixels that are sunlit as I render the level. Say that the light source is top-left. Now say that we want to know if pixel (432, 122) is sunlit. The depth of (432, 122) is 7. Now we step seven pixels to the left and seven pixels left, and see if this specific pixel is occupied by a sprite (because we have drawn all the sprites to a bitmap each frame, I guess) and if it is, we color pixel (432, 122) according to the shade palette rather than the sun palette. Stuff that is further back in the depth map is shadowed by things that are further to the left/up, making the shadows play over the objects as supposed to without having to bother about the static elements that are the same each frame.<br><br>Could maybe be made less processor intense (but more RAM-demanding) if you had one mask for each depth layer, and just applied the sprite silhouettes to those with different offsets. There would be 25 masks... Idk, this one probably wouldn&#039;t work.<br><br>Other ideas?
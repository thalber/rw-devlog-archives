JLJac
67

@dancing dead, that&#039;s actually exactly how I do it! The problem has been when I want to do something like collision. I use inheritance in my little &quot;learning c#&quot; thingie, and I have some objects inherit from a &quot;physicalObject&quot; cast. (I&#039;m very interested in this &quot;interfaces&quot; thing you mention though, will check that out!) When two objects collide, both of them gets a collision function called, where the object they collide with is passed as a PhysicalObject. Problem was, if they for example was a bullet I wanted to do bullet-specific stuff with them on collision, and that&#039;s where my casting mess came into play. Now I&#039;m dying to implement &quot;is&quot; and &quot;as&quot; instead though! At this pace, my brain won&#039;t fit in my scull tomorrow evening!<br><br>@Juan, cool! I&#039;ll try to find the atlas from inside the code... Maybe there is some kind of unity command to return the current assets in the project or somthing like that, and I can use that to find it. GetType won&#039;t really do anything I can&#039;t use the &quot;is&quot; keyword for right now, except it might work better for switch cases? Important question, what&#039;s the data type of the return on the GetType function? Is it a string called &quot;PlayerClass&quot; or is it some kind of separate data type that&#039;s made to hold the ID&#039;s of classes? <br><br>@Sebioff, that seems really cool - thanks a bunch! For now I think globals will be enough, but when I want to make things even leaner I&#039;ll remember the extension methods :D<br><br>@8-Bit Ape, thank you very much!
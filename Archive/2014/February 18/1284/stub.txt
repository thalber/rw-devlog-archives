JLJac
64

Yeah, and thanks for the help! I&#039;m super excited to have gotten started!<br><br>Ok, so now I see that the CPU is definitely the bottle neck here. 15 000 sprites moving around was no problem, but when I started doing some square root based distance checks between them I suddenly couldn&#039;t have much more than 200. If I did some optimizing (avoiding sqrt unless necessary) I could get up to 1000 or so, except in special scenarios (all the balls packed together so that they do a lot of distance checks between each other) when the framerate would drop. <br><br>This shouldn&#039;t be a problem though, as the standard Rain World scenario doesn&#039;t have 200 objects all checking distances against each other. It&#039;s nice to know that as long as I don&#039;t bring too much CPU heavy stuff like physics etc into the equation I can have basically unlimited moving sprites on the screen. Makes me think quite a lot about different exciting possibilities...<br><br>Then again I&#039;ve only tried this with extremely light-weight graphics. There could very well be an exponential increase in performance demand as I use bigger graphics with more color depth - so I should definitely try that before I celebrate too much.<br><br>Currently I&#039;m contemplating whether to continue to play with this current setup and try to create more game-like mechanics to feel what that feels like, or if it&#039;s time to move on to MonoGame. Much of the stuff I need to try/learn is C# and not Futile or MonoGame specific, and as I&#039;m having fun with this I figure I could just hang around for a bit and learn more about inheritance etc.
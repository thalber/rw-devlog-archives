JLJac
70

Thanks so much again guys&nbsp; <img src="https://web.archive.org/web/20150101111809im_/http://forums.tigsource.com/Smileys/derek/toast.gif" alt="Beer!" border="0"><br><br><b>Update 218</b><br>Let&#039;s get back to some devlogging haha!<br><br>Made two maps for how Rain World c# is looking in my head at the moment. I made them both to clarify my own thoughts, and so that you guys could give me an opinion on it <img src="https://web.archive.org/web/20150101111809im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"><br><br>First up are the classes:<br><br><a href="https://web.archive.org/web/20150101111809/http://joarportfolio.com/images/rainWorld/structure.jpg" target="_blank"><img src="https://web.archive.org/web/20150101111809im_/http://joarportfolio.com/images/rainWorld/structure.jpg" alt="" width="200" height="120" border="0"></a><br><br>Those are the most basic classes I know I&#039;ll need. Later a lot of new ones will definitely pop up, such as &quot;level loader&quot; etc etc, but this is just what&#039;s needed to run a basic game session.<br><br>What do you guys think? Am I using inheritance the right way? <br><br>Then, what I call the &quot;instance tree&quot; or &quot;update tree&quot;:<br><br><a href="https://web.archive.org/web/20150101111809/http://joarportfolio.com/images/rainWorld/structure2.jpg" target="_blank"><img src="https://web.archive.org/web/20150101111809im_/http://joarportfolio.com/images/rainWorld/structure2.jpg" alt="" width="200" height="120" border="0"></a><br><br>This is the structure through which the &quot;update&quot; command is forwarded each frame. The general idea is this - objects own each other, and objects further down the hierarchy are dependent on their &quot;masters&quot;. Masters are autonomous. <br><br>So for example, a lizard has four limbs. It creates them on startup and saves them in an array. The &quot;Room&quot; (which is the class that does most of the game engine stuff) is not aware of these limbs, it just has a reference to the lizard. Every frame, the Main Loop tells the Room to update, the Room tells the Lizard to update, and the Lizard tells each of its Limbs to update. The Room doesn&#039;t need to bother about the Limbs.<br><br>One thing that might need a special mention is the BodyChunk class. This is basically a physics object, the one that will do collision checking etc. Note that contrary to how many games would do it, the creatures <i>are </i>not physical objects, they <i>have </i>them. This is because of the exact thing that gives Rain World its animation style - that each creature has many segments which makes them soft and bendable. <br><br>This means that the creature classes (lizard, player, etc) are just coordinators of other instances, and &quot;communication hubs&quot; those instances can use to talk to each other. For example, a lizard will <i>own </i>an instance of LizardAI, and when LizardAI wants to know where the body of that lizard is, it&#039;ll go by the Lizard instance. From inside LizardAI I imagine it might look something like this:<br><div class="codeheader">Code:</div><div class="code">Vector2 myPosition = parent.bodyChunks[2].pos;</div>where parent is a reference to the Lizard instance, bodyChunks is an array of the BodyChunk instances that Lizard has, and pos is the position of a specific BodyChunk.<br><br>Similarly I imagine the Room will be a communication hub where difference creatures and objects can find each other. Say that a LizardAI wants to loop through all the items in a room to see if one of them is a spear. Then it could look something like this:<br><div class="codeheader">Code:</div><div class="code">Spear spear = null;<br>for (i=0; i &lt; parent.currentRoom.objects.Count; i++)<br>{<br>&nbsp; &nbsp;if (parent.currentRoom.objects[i] is Spear){<br>&nbsp; &nbsp; &nbsp; spear = (parent.currentRoom.objects[i] as Spear);<br>&nbsp; &nbsp; &nbsp; break;<br>&nbsp; &nbsp;}<br>}<br></div>Where parent is the Lizard that owns the LizardAI we&#039;re currently in, currentRoom is a reference to the Room that Lizard is currently in, and object is an array in the Room used to keep track of all the objects.<br><br>The idea here is that when two things some way out in the branches (LizardAI and Spear) want to communicate, they have to trace their way back to the last common branch (LizardAi -&gt; Lizard -&gt; Room). This is my interpretation of an un-messy way to do things without using globals, and I just wanted to check if you think it looks OK.<br><br>It just struck me that in the Classes map, creatures, items and effect sprites should probably all inherit from an &quot;updateable object&quot; class that the rooms could hold in arrays and dish out update commands to. Please consider that changed <img src="https://web.archive.org/web/20150101111809im_/http://forums.tigsource.com/Smileys/derek/wink.gif" alt="Wink" border="0"><br><br>So, what do you guys think? Does it look reasonable? Any critique super welcome&nbsp; <img src="https://web.archive.org/web/20150101111809im_/http://forums.tigsource.com/Smileys/derek/grin.gif" alt="Grin" border="0">
JLJac
69

I ended up using the dictionary approach. Just want to once again confirm how incredibly thankful I am to have you guys help me :D<br><br>The sprite stuff now looks like this - I create an array of sprite containers, and I also have a dictionary where I&#039;ve named each of the positions in that array. In order to not have to fetch both of those variables from the main game class each time, I&#039;ve created a little function that looks as such:<br><div class="codeheader">Code:</div><div class="code">public FContainer returnFContainer(string index){<br>&nbsp; &nbsp;return SpriteLayers[ spriteLayerIndex[index]];<br>}</div>Where SpriteLayers is the list of FContainers and spriteLayerIndex is the dictionary. Then I can, from the objects, super easily add a sprite to whatever layer I want like this:<br><div class="codeheader">Code:</div><div class="code">tpGame.returnFContainer(&quot;BkgLayer&quot;).AddChild(spr); </div>It works like a charm <img src="https://web.archive.org/web/20150101111825im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"> Best thing is that if I want to add a layer in the middle of the stack, I just have to change the dictionary in <i>one </i>place, rather than index numbers in all the objects. As long as the strings are the same, they&#039;ll find their layers!<br><br>I should probably start a workshop thread... But now I feel like I&#039;m ready to start working on real rain world stuff soon, this learning phase should be more or less over. <br><br>I&#039;m doing a tiny little learning project, not because I want to waste time not working on rain world, but because I felt that it was better for me to start rain world porting with some tools in the box and some basic knowledge, so I wouldn&#039;t immediately clutter rain world with a bunch of stuff I&#039;d implement just to learn this new environment. Now the test project is done, and the last thing I want to implement is a menu, so there&#039;s somewhere to press &quot;restart&quot; and I can share it with you guys for fun <img src="https://web.archive.org/web/20150101111825im_/http://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"><br><br>This also brings me to another thing I&#039;d like to learn - someone mentioned creating a little mini class inside a bigger class.<br><br>My main menu will have four items. All of these have a lot in common, they each hold an FLabel (futile&#039;s text sprites), they should all be selectable, they should all change color when selected, etc. A lot of behavior in common, simply. <br><br>This calls for a &quot;MenuItem&quot; class. But the &quot;MenuItem&quot; class should only be instanciated and manipulated from inside the &quot;Menu&quot; class. Also it&#039;s a very small class which only holds a few variables and hardly executes any code, so it feels weird to roll out the red carpet and give it an entire text file of its own. Ideally, I&#039;d wanna create some kind of mini class that&#039;s only available from inside the &quot;Menu&quot; class. <br><br>After searching for &quot;c# nested classes&quot; I think <a href="https://web.archive.org/web/20150101111825/http://msdn.microsoft.com/en-us/library/ms173120.aspx" target="_blank">this</a> might be the thing, but I just wanted to check with you guys if this practice is considered halal, and if you have some tips or tricks to be considered?
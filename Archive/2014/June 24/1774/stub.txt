JLJac
88

<b>Update 257</b><br>I&#039;ve been doing a bit of animation work on the spears and stones. In the Unity version the framerate is potentially very high, and I find myself wanting to account for that - ie I want things to snap between positions and rotations as little as possible but instead have them move smoothly. One way to check if I&#039;m achieving this is to look at it in slow motion. There shouldn&#039;t be any jumpy movements even when played at 1/20 of the speed, is the philosophy. This is intended to give that extra little bit of crispness to the animation even when played at normal speed. All of those frames will be displayed after all, and if they are all smooth that&#039;ll probably add up to an impression of general smoothness even though you don&#039;t perceive the individual frames.<br><br>Here&#039;s a spear being thrown in regular speed and in slow motion.<br><br><img src="https://web.archive.org/web/20141219115754im_/http://imgwiz.com/images/2014/06/24/hvFQM.gif" alt="" border="0"><br><br>Note that there&#039;s no animation work what so ever done on the slugcat for throwing, only the spear. Obviously we&#039;re gonna want the slugcat to really lean into the throw later on. Right now it looks like the spear is throwing itself&nbsp; <img src="https://web.archive.org/web/20141219115754im_/http://forums.tigsource.com/Smileys/derek/huh.gif" alt="Huh?" border="0"><br><br>In other news, the pathfindingpocalypse has begun.<br><br><img src="https://web.archive.org/web/20141219115754im_/http://imgwiz.com/images/2014/06/24/gHQaX.jpg" alt="" border="0"><br><br>I have a few ideas for path finding in general, that I want to get into a big base class to be used by all the sub classes later. The most important of those ideas is this: <br><br>You guys remember how I made something that could map the connectivity between different exits in a room, right? Here&#039;s the deal - using that data, the path finder can consider paths through offloaded rooms. In each offloaded room (or abstract room, as I call them in the code) I place a path finding cell for each exit. Key is that it&#039;s not one per room, but one per exit. The idea is that the path finding algorithm will be able to check for viable paths through the offloaded world by using these cells, and the pre-calculated data of how difficult it is to get between them. When the pathing creature is in a room, and that room is loaded, a high-res pathing map with one cell per tile is created for that specific room. These pathing cells are the same class as the ones in the world map though, and they are hooked up to the world map through the exits. <br><br>So, the idea is that this system will allow creatures to find paths through loaded and offloaded rooms completely seamlessly - there won&#039;t be a separate system for path finding on the world map or in the local area. At the same time, the world map will be grossly simplified compared to the local area, making it way easier on the processor and RAM, but providing the same paths as if all of the world was loaded and taken into consideration at once.<br><br>Wish me luck.
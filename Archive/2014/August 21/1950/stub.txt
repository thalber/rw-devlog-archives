JLJac
97

@Loren Schmidt, yeah, that sounds a lot like what I&#039;ve been trying to do, but I might have to throw a few more counters in there to get a good rhythm to it o.0 Are you doing procedural animation too?<br><br>@Kytin, interesting idea! Maybe we could keep physical traits and &quot;personality&quot; separate, and only have the latter be individual...<br><br><b>Update 294</b><br><br>I made a couple of pretty big infra structure changes, such as moving all of the lizard breed definition stuff to the same place. Now there&#039;s a static class which is fed a lizard color and returns the complete template, all of it based on one huge enum switch. Maybe not the most elegant solution, but it works flawlessly and is only supposed to run once when the game is started up.<br><br>Also got the thing where lizards have different speeds in different terrain and when moving in different directions down. At this point it averages between the terrain type that each of the three body chunks occupy.<br><br>Oh, and sometimes you just have to do something that doesn&#039;t make any sense to the schedule, but you want to do just for fun! So I made the lizards&#039; limbs have health, and go limp and useless if they&#039;re too low. <br><br><img src="https://web.archive.org/web/20141227124052im_/http://giant.gfycat.com/SpiritedAstonishingKitten.gif" alt="" border="0"><br><br>This is going to be really cool later, when spears and stuff is in... Note how one of the front legs is sometimes working, sometimes not - when they have low health, but not 0, they&#039;re switched on and off a bit like that.<br><br>The other thing I got started on today was an obstacle tracker. Because of the physics based nature of RW, not everything is very predictable, and even after me trying to eliminate all the getting stuck scenarios, there will be some obscure getting stuck scenarios left. The obstacle tracker isn&#039;t only there to patch over problems I&#039;m too lazy to fix, though <img src="https://web.archive.org/web/20141227124052im_/http://forums.tigsource.com/Smileys/derek/wink.gif" alt="Wink" border="0"> It plays a part in making the NPC&#039;s seem more intelligent over all, and makes them able to account for some weird unpredictable scenarios that might occur in any game session. What it basically boils down to is being able to identify that a certain move is not possible after a number of failed attempts, and trying something else.<br><br>This (rather tragic) gif shows a lizard that tries to climb up to the player, but is rather unsuccessful due to its limbs being disabled. The gif is sped up, because without functioning limbs the lizard is really slow.<br><br><img src="https://web.archive.org/web/20141227124052im_/http://fat.gfycat.com/CleverHeartyIcterinewarbler.gif" alt="" border="0"><br><br>Whenever a move fails, the destination tile is reported (red in the gif). After being reported a certain amount of times, the tile is marked as an obstacle (yellow) and the path finder is told to restart. This time around the yellow tiles will have a higher cost assigned to them.<br><br>This means that after trying to climb a couple of times, the lizard concludes that &quot;OK, this isn&#039;t working&quot; and decides to take another way up. This system works no matter what the obstacle is - if it&#039;s lame limbs, a stream of water, some heavy creature grabbing on to the lizards tail, anything. <br><br>This multiusability is both its strength and its problem - the lizard still isn&#039;t very smart about cause and effect. A smart lizard would deduce that <i>climbing </i>was the problem, not these specific tiles. With this system it might very well go to another climbing pole and try that before realizing that it has to get up some other way.<br><br>The point is, however, that this is a fallback. If I want to make the lizard able to understand that it can&#039;t climb without functioning limbs, that&#039;s something I&#039;d write specifically in the AI ( if (functioningLimbs &lt; 4) noClimb = true; ) &nbsp;but for all the scenarios I won&#039;t be able to predict, this fallback solution is a lot better than infinitely trying to get past some impossible hurdle. <br><br>Before it&#039;s done I want the obstacle tracker to have one more function - it should be able to identify when the obstacle is in fact a creature blocking its way. When a huge green lizard is sitting in an opening and a tiny blue one is pushing and pushing in vain to get through, it seems kind of unreasonable for it to assume that &quot;it must be something wrong with this specific tile!&quot; Also, once the green lizard is gone, the blue one should really stop avoiding that tile. So I think a specific framework for being blocked by colliding in other objects might be in place.
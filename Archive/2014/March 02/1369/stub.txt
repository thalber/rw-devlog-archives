JLJac
68

Thanks guys! Wow, dictionaries and hashtables seem awesome, though I still haven&#039;t been able to figure out the exact difference between them... <br><br>Juan, your solution seems pretty amazing! It would enable me to name, remember and access every sprite, right? I&#039;m not sure I understand it 100% hehe ... I just worry about the memory it would take to store names for hundreds of sprites D: <br><br>So, for my problem, maybe the simplest and most &quot;elegant&quot; solution would be to add all my containers to an old school array, and then use a dictionary to store their indexes? That way I could access something like this:<br><div class="codeheader">Code:</div><div class="code">tpGame.SpriteLayers[sprLrsIndxDict[&quot;Background&quot;]].AddChild(someSprite);</div><br>The question that comes to mind in that case is why not to use an enum? Then the auto complete would help me remember what I named all my layers.<br><div class="codeheader">Code:</div><div class="code">tpGame.SpriteLayers[(int)SpriteLayerIndexer.Background].AddChild(someSprite);</div><br>Or, even better, maybe you could create an enum where the data type is a futile container?<br><div class="codeheader">Code:</div><div class="code">FContainer &nbsp;bkg = new FContainer ();<br>FContainer &nbsp;fg = new FContainer ();<br>enum SpriteLayers : FContainer {Background = bkg, Foreground = fg};<br>SpriteLayers.Background.AddChild(someSprite);</div><br>That would be totally awesome, because it would be a neat way to clump together related data, and name it according to its function and have the autocomplete help me remember the names!<br><br>Then I could use that for <i>a loooot </i>of things! For example, if I want to store the some parameters for the playable level area, I could go like:<br><br><div class="codeheader">Code:</div><div class="code">enum LevelParams : float {LeftPadding = 10f, RightPadding = 10f, RoundCornernsRad = 5f};</div>And then just access that easy as pie, without having to create a cumbersome class that would only be created in one single instance either way. I&#039;m gonna try this out right now! The only thing that could make me happier would be the same thing but able to store <i>mixed </i>data types, and I think I read something like that in the Dictionary documentation page... To the hackmobile!<br><br><br>Edit: It turns out the enum structure is very particular about what data types it takes <img src="https://web.archive.org/web/20150101203245im_/http://forums.tigsource.com/Smileys/derek/sad.gif" alt="Sad" border="0"> Only int, byte, long and a few others are valid. Perhaps a dictionary is the best way to create a list where you access stuff by a name rather than by an index number, then?&nbsp; 
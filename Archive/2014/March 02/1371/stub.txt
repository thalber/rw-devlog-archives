JLJac
68

Hahaha yeah the hackmobile didn&#039;t even leave the garage this time XD<br><br>In Lingo, there was something called a property list. It was basically a little class that was declared on the fly. A declaration could be like this:<br><br><div class="codeheader">Code:</div><div class="code">LevelParams = [#CornerRadius : 120, #BottomPadding : 40, #LevelName : &quot;Magma Mayhem&quot;, #TerrainData : gigantic2Darray]</div><br>Then I could just grab anything out of that thing, like this:<br><div class="codeheader">Code:</div><div class="code">levelTitle.text = LevelParams.LevelName</div><br>This was cool because it enabled me to group my data together by context. I didn&#039;t need to create a new property in the player class for every little parameter that was related to movement, I could just create a <br><div class="codeheader">Code:</div><div class="code">MoveParams = [#Runspeed : 4.2, #JumpHeight : 2.1, #DefaultMode : &quot;Running&quot;]</div>and everything became a lot less cluttered.<br><br>Also, talking about tree-like structures, these things could be nested indefinitely. So I could group things, and then access them like<br><div class="codeheader">Code:</div><div class="code">jmp = MoveParams.JumpParams.DoubleJump.Strength</div>I don&#039;t expect to be able to do this in C#, but if I was able to just group and label the data at all, even if everything in the same container needs to be the same data type, that would be awesome.<br><br>Dictionaries feel wrong, because they feel like they&#039;re used for searching gigantic databases rather than just grouping three variables together because they&#039;re related. I could create classes for all of those things, but it feels super cumbersome to have a million classes where the majority is just a container that holds two or three properties. <br><br>Is there some way to accomplish something like this, or is my approach just wrong from a purist programming point of view?<br>
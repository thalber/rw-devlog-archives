JLJac
261

YES! The code:<br><br><div class="codeheader">Code:</div><div class="code"><br>CGPROGRAM<br>#pragma target 3.0<br>#pragma vertex vert<br>#pragma fragment frag<br>#include &quot;UnityCG.cginc&quot;<br><br>sampler2D _MainTex; //the map texture<br>sampler2D _mapFogTexture; //the map &quot;exploration&quot; texture<br><br>uniform float _RAIN;<br><br>uniform float2 _screenSize; //screen size in pixels<br>uniform float2 _mapSize; //map size in pixels<br>uniform float2 _mapPan; //the pan position on the map<br><br>struct v2f {<br>&nbsp; &nbsp; float4&nbsp; pos : SV_POSITION;<br>&nbsp; &nbsp;float2&nbsp; uv : TEXCOORD0;<br>&nbsp; &nbsp; float2 scrPos : TEXCOORD1;<br>&nbsp; &nbsp; float4 clr : COLOR;<br>};<br><br>float4 _MainTex_ST;<br><br>v2f vert (appdata_full v)<br>{<br>&nbsp; &nbsp; v2f o;<br>&nbsp; &nbsp; o.pos = mul (UNITY_MATRIX_MVP, v.vertex);<br>&nbsp; &nbsp; o.uv = TRANSFORM_TEX (v.texcoord, _MainTex);<br>&nbsp; &nbsp; o.scrPos = ComputeScreenPos(o.pos);<br>&nbsp; &nbsp; o.clr = v.color;<br>&nbsp; &nbsp; return o;<br>}<br><br><br><br>half4 frag (v2f i) : COLOR<br>{<br><br>//This here is it!<br>float dst = clamp(distance(i.scrPos, half2(0.5, 0.5)), 0, 1);//distance to center of screen<br>half2 displace = normalize(i.scrPos-half2(0.5, 0.5)) * (1-dst)*pow(dst,lerp(4,6,dst))*2; //the displace vector. Spent lots of time tuning this one to get it right, not knowing that I&#039;d have to backwards-engineer it later!<br>displace.y *= 0.5 / 3.0; //Displace less vertically, as the screen is wider than tall (and divide by three because the map texture is 3x as tall as the actual map size, accommodating the 3 layers)<br>displace.x /= _mapSize.x / 500; //divide the displace with the size of the map texture getting a consistent amount of displace on different-sized maps (500 is a tuned value to get the right amount of displace)<br>displace.y /= _mapSize.y / 500; <br><br>float h = 0.5; //the blue color channel tells the shader which layer it should render - if statement because the floats become a bit distorted in passing to the shader<br>if(i.clr.z == 0) h = 0;<br>else if (i.clr.z == 1) h = 1;<br><br>//get the grab coordinate on the map texture<br>half2 grabPos = half2(_mapPan.x + (i.uv.x - 0.5) * (_screenSize.x / _mapSize.x) / lerp(3.25, 4.75, i.clr.y), (_mapPan.y / 3.0) +&nbsp; ((2.0*h)/3.0) + ((i.uv.y - 0.5)&nbsp; * (_screenSize.y / _mapSize.y) / lerp(3.25, 4.75, i.clr.y)) / 3.0);<br>grabPos -= displace; //applying the displace. If I comment this out, I get a flat-looking map onto which I *can* place markers accurately.<br><br>if(grabPos.y &lt; lerp(0.0, 2.0, h)/3.0) grabPos.y = lerp(0.0, 2.0, h)/3.0; //clamping the grab coord in the vertical third of the texture that is this layer of the map<br>else if(grabPos.y &gt; lerp(1.0, 3.0, h)/3.0) grabPos.y = lerp(1.0, 3.0, h)/3.0;<br><br>half4 grabCol = tex2D(_MainTex, grabPos);<br><br>//this stuff below here is just about giving the pixel the right color once I have the right texture coordinate - not really relevant to the problem at hand<br><br>if(grabCol.y &gt; 0.5 || tex2D(_mapFogTexture, grabPos).x &lt; 0.5) return half4(0,0,0,0.7 * i.clr.w * (1.0 - i.clr.x));<br><br>float lght = grabCol.x;<br><br>if(lght &gt;= 0.3 &amp;&amp; lght &lt;= 0.7 &amp;&amp; grabCol.y == 0)<br>return half4(1,1,1,1 * i.clr.w);<br>else if(lght &lt; 0.3){<br>return half4(0,0,0,0.7 * i.clr.w * (1.0 - i.clr.x));<br>}<br>else if(grabCol.z &gt; grabCol.x*lerp(0.5, 0.9, sin((grabPos.x - (_RAIN*75/_mapSize.x))*_mapSize.x*0.25))) <br>return half4(0.05,0.05,0.8,i.clr.w*lerp(0.5, 0.1, i.clr.x));<br>else {<br><span style="white-space: pre;"> </span>if(tex2D(_mapFogTexture, grabPos).x &lt; 0.54)<br><span style="white-space: pre;"> </span>return half4(0,0,1,i.clr.w);<br><span style="white-space: pre;"> </span>else<br><span style="white-space: pre;"> </span>return half4(0.25,0.25,0.25,0.4 * i.clr.w * (1.0 - i.clr.x));<br>}<br>}<br>ENDCG<br><br></div><br>Please keep in mind that I&#039;m a self-taught savage that never intended for anyone to read this code, so it might be baaaaaaad. <br><br>The map is three layers, each of which occupy a vertical third of the map texture. The sprite knows which layer to draw from by its blue color channel - actual map object has three sprites with blue colors 0, 0.5 and 1. Those map sprites are the same size as the screen, ie 1024*768 or 1366*768 in case of wide screen. <br>
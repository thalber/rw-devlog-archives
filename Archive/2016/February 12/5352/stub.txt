JLJac
267

<div class="quoteheader"><a href="https://web.archive.org/web/20210308165527/https://forums.tigsource.com/index.php?PHPSESSID=gsma5um98jvtl937967ogqpgl3&amp;topic=25183.msg1221512#msg1221512">Quote from: Prinsessa on February 10, 2016, 10:27:20 AM</a></div><div class="quote">So I think I&#039;m going to start playing around with some Fish AIâ„¢ sometime soon... Any pr0tips from the masters?<br></div><br>I have one that&#039;s very simple and might be useful!<br><br>&nbsp;If you have something where you want to compare many different options (such as where to go on the map) - write a function that can grade each option with a score. <br><br>So for the where to go thing, say that you want them to not get stuck in corners, you want them to stay close to their mates and you want them to stay away from the player. Then in your ScoreOfThisPosition method you add to the score the distance to the closest wall, subtract from the score the distance to the school buddies, and then add the distance to the player x 10 (naturally the different factors need manual tuning). <br><br>A position that&#039;s inside a wall or otherwise unreachable should just return a float.minValue or something, you never want those.<br><br>Next step, you have the fish save a goal position. Now, every frame you pick a random position in the room (or a random position reasonably close to the fish) and compare the score of that position to the score of the saved goal position. If the score of the random test position is better, set that as the new goal!<br><br>This system is cool because it spreads the comparing out over many frames, contrary to comparing every alternative every frame which would be super slow. Also because it has a random element to it you&#039;ll get something that&#039;s a bit unpredictable, but because the goal position can only swap to a better position you know that given some time it will reliably gravitate towards the right behavior. <br><br>Hope that gets you inspired! Lycka till!
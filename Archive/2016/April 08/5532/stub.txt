JLJac
276

<div class="quoteheader"><a href="https://web.archive.org/web/20210308170002/https://forums.tigsource.com/index.php?PHPSESSID=63g5n7877c8nuqntku70m5esm7&amp;topic=25183.msg1237503#msg1237503">Quote from: io3 creations on April 08, 2016, 12:57:59 PM</a></div><div class="quote"><br>I&#039;d say they should give different results.&nbsp; In the first, each attempt can be a success but in the second, using power you lower the random value and thus the chance of success.<br><br></div><br>Nah I&#039;m increasing the chance of success by lowering the random value, because it&#039;s a positive if the random value is <i>lower</i> than the chance! <br><br><div class="quoteheader"><a href="https://web.archive.org/web/20210308170002/https://forums.tigsource.com/index.php?PHPSESSID=63g5n7877c8nuqntku70m5esm7&amp;topic=25183.msg1237503#msg1237503">Quote from: io3 creations on April 08, 2016, 12:57:59 PM</a></div><div class="quote"><br>BUT, using the code below while the average random value is indeed ~0.5, the power averages are very different:<br>average&nbsp; UnityEngine.Random.value ^ 2 = ~0.33<br>average&nbsp; UnityEngine.Random.value ^ 3 = ~0.25<br><br></div><br>Hmmmm is this true? Because if the average of Random.Value is ~0.5, the average of Random.Value * Random.Value should be ~0.25, to my mind? I might definitely be missing something, probability is so incredibly tricky! Something about how averages actually work, for example&nbsp; <img src="https://web.archive.org/web/20210308170002im_/https://forums.tigsource.com/Smileys/derek/cheesy.gif" alt="Cheesy" border="0"><br><br>Maybe I should manipulate the chance rather than the dice roll, to keep things a bit saner. I did try something along the lines of:<br><br>return Random.Value &lt; Mathf.Pow(chance, 1f / time);<br><br>But that seemed to yield the same results as the other faulty setup. One thing that might be playing into this is that I never studied any math above the high school stuff and that&#039;s loooong ago, so I just don&#039;t have any idea about a lot of stuff. <br><br><div class="quoteheader"><a href="https://web.archive.org/web/20210308170002/https://forums.tigsource.com/index.php?PHPSESSID=63g5n7877c8nuqntku70m5esm7&amp;topic=25183.msg1237509#msg1237509">Quote from: insaneinside on April 08, 2016, 01:21:52 PM</a></div><div class="quote">In fact, TIL that a <i>variable</i> can be <i>not</i> idempotent in C# â€” that&#039;s a seriously scary WTF to me.&nbsp; &nbsp;<img src="https://web.archive.org/web/20210308170002im_/https://forums.tigsource.com/Smileys/derek/shocked.gif" alt="Shocked" border="0"><br></div><br>Whaaaaat that&#039;s scary!&nbsp; <img src="https://web.archive.org/web/20210308170002im_/https://forums.tigsource.com/Smileys/derek/shocked.gif" alt="Shocked" border="0"> <br><br>In my experience my Unity + C# setup has been perfectly deterministic so far (if that&#039;s what idempotence means) even when using Random, as long as the random is fed the same seed. I&#039;m even relying on it to a pretty large degree with the randomized creature generation - all the critters save is a seed, and the next time they are to be brought up on the screen they generate their features from that seed... And they&#039;ve been looking consistently the same so far, at least! <br><br>As for the two functions, I should probably have clarified - I understand that they won&#039;t return the same bool, because of the one UnityEngine.Random call versus the many - but I expected them to have the same <i>probability</i> of returning a positive.<br><br>Currently I just have the loop solution implemented, and it seems to be working - it just annoys me because I feel like repeating over the same line of code lots and lots of times should be unnecessary when there&#039;s probably some slicker and less performance heavy solution at hand. Then again I&#039;m not actually experiencing any lag from this. The &quot;time&quot; variable is usually about 40-70 and this TimeInfluencedRandomRoll method is called a few times a frame, which might be fine? For loops should only really be a problem if they have something heavy inside of them, and this loop content seems pretty slim. Still though, rather inelegant! 
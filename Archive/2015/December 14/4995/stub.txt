JLJac
249

Thank you!<br><br>Math/programming question, guys. You have noticed that bending effect of the map I have going, right? I&#039;m having a slight problem with that. What it&#039;s about is that I have to run the algorithm backwards, and my mathz are not good enough.<br><br>This is the practical issue - I want to place markers on the map with pixel precision. This means I basically have to compensate for the distortion effect.<br><br>The distortion effect is a fragment shader that works like this:<br><br><img src="https://web.archive.org/web/20210308163922im_/http://imgwiz.com/images/2015/12/14/Uai3e.png" alt="" border="0"><br><br>We are at fragment x1, y1. What color to render? In order to get that coordinate (x2, y2) I go through a little formula. This formula basically moves the x2,y2 towards the center of the image, and the distance of this movement (magnitude of black arrow in illustration) is dependent on the distance between the texture&#039;s center and x1,y1 - d1. The effect - the further towards the edge a coordinate is, the more it will go inwards toward the center to grab its color, resulting in a concave sort of bend to the image rendered.<br><br>All good, this part works well! However, I just can&#039;t figure out how to do this backwards. When placing a map marker, I know the default coordinate it should be placed at were there no distortion, and theoretically it seems like it should be as easy as moving it <i>outwards </i>from the center with a magnitude dependent on the distance to the center. So basically I have x2,y2 and want to get x1,y1 this time around. <br><br>If it was a linear correlation between distance to the center and movement magnitude, I could accomplish this by just switching multiplication for division in the code. However, it&#039;s a much more complex formula, which uses the value d1 several times.<br><br>When doing this backwards, I get a sort of catch 22 as I don&#039;t have d1, I have d2, which I don&#039;t know what to do with. My only way of getting d1 would be to have the point x1,y1, which is actually the result I&#039;m after, so the key is locked in the box.<br><br>The horrible formula I have for deriving x2,y2 from x1,y1 is nothing less than:<br>x2, y2, = x1,y1 + (x1,y1 - midPoint).normalized * (1-d1)*(d1 ^ (4 + 2*d1))*2;<br><br>And this is what I have to flip and do backwards. I can switch it around so that I have for example x1 on one side of the equal sign, but as all the d1&#039;s in the formula are dependent on the values of x1 and y1 I still can&#039;t get a workable result.<br><br>I guess my question is basically this - is this mathematically solvable or is it an equation with infinite solutions or something like that? Pretty stuck on this one!
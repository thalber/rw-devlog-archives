JLJac
181

<div class="quoteheader"><a href="https://web.archive.org/web/20210309162437/https://forums.tigsource.com/index.php?PHPSESSID=t4i9kie2g9bk9otn2dtlng8j11&amp;topic=25183.msg1133139#msg1133139">Quote from: tortoiseandcrow on April 25, 2015, 03:50:11 PM</a></div><div class="quote">Incidentally, I just finished reading an section in a book that discusses the way maps work from an ethnographic perspective. When you&#039;re a local, the landscape is this mesh of lived experience, emotional memories, that sort of thing. A map abstracts from that lived experience to provide you with a view from elsewhere, both literally (maps are projections of the landscape from above) and culturally (locals don&#039;t need maps). Experientially and culturally speaking, a map is a tool to allow you to access an unfamiliar space without having to become familiar with it. If you do become familiar with a space via a map, your experience is mediated by the map&#039;s abstraction. The map comes to define (and thus distort, because abstraction is by definition a selective representation) the territory it describes, rather than letting the territory directly inform your experience.<br><br>So there you go. Be a local! Ethnographic theory has your back.<br></div><br>A really interesting read! Agreed on all points!<br><br><div class="quoteheader"><a href="https://web.archive.org/web/20210309162437/https://forums.tigsource.com/index.php?PHPSESSID=t4i9kie2g9bk9otn2dtlng8j11&amp;topic=25183.msg1133152#msg1133152">Quote from: NicoM on April 25, 2015, 04:50:52 PM</a></div><div class="quote">Hey Joar, would you be willing to describe some of the physics involved in stuff like the tails and dangling parts of vultures and such, I haven&#039;t learned enough math yet to get to things rotating around points with gravity or anything like that, but I&#039;m starting to want to try some stuff in my games, and google is being unhelpful. Found the simple pendulum formula, which I can at least read, if not fully understand how it works, but I&#039;m not sure what you use. (you probably use that for the ropes at least, if so, could you explain it to me as you would a baby? I&#039;d appreciate that;))<br><br>If you&#039;re busy that&#039;s totally understandable,<br>Nico<br></div><br>The magic trick used for everything creature physics related in this game comes down to a couple of lines of code. Let&#039;s take a look:<br><br><div class="codeheader">Code:</div><div class="code">public class Chunk{<br>&nbsp; &nbsp;public Vector2 pos;<br>&nbsp; &nbsp;public Vector2 vel;<br><br>&nbsp; &nbsp;public Chunk(Vector2 initPos){<br>&nbsp; &nbsp; &nbsp; pos = initPos;<br>&nbsp; &nbsp; &nbsp; vel = new Vector2(0f, 0f);<br>&nbsp; &nbsp;}<br><br>&nbsp; &nbsp;//Called every frame<br>&nbsp; &nbsp;public void Update(){<br>&nbsp; &nbsp; &nbsp; pos += vel;//Apply velocity to position<br>&nbsp; &nbsp; &nbsp; vel *= 0.98f;//Air friction<br>&nbsp; &nbsp; &nbsp; vel.y -= 0.8f;//Gravity, with Unity&#039;s (non?)inverted y-axis. If you&#039;re using something else, flip it.<br>&nbsp; &nbsp; &nbsp; if (pos.y &lt; 20f){// Putting a simple floor in the simulation space so the chunks don&#039;t fall off screen when you try it ;)<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;pos.y = 20f;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;vel.y = 0f;<br>&nbsp; &nbsp; &nbsp; }<br>&nbsp; &nbsp;}<br><br>}</div><br>This here is a class representing some physical object, or rather part of a physical object. I&#039;ll call it a Chunk. As you have a game with stuff that&#039;s moving around on the screen and is affected by gravity, I take it you know what&#039;s going on in this code&nbsp; <img src="https://web.archive.org/web/20210309162437im_/https://forums.tigsource.com/Smileys/derek/hand-thumbsup-r.gif" alt="Hand Thumbs Up Right" border="0"><br><br>Now, the magic trick! First a simplified example:<br><br><div class="codeheader">Code:</div><div class="code">public void ConnectChunks(Chunk A, Chunk B){<br>&nbsp; &nbsp;float wantedDist = 10f;<br>&nbsp; &nbsp;float currentDist = Vector2.Distance(A.pos, B.pos);<br><br>&nbsp; &nbsp;Vector2 dir = (B.pos - A.pos).normalized;<br><br>&nbsp; &nbsp;A.pos -= (wantedDist - currentDist) * dir * 0.5f;<br>&nbsp; &nbsp;A.vel -= (wantedDist - currentDist) * dir * 0.5f;<br>&nbsp; &nbsp;B.pos += (wantedDist - currentDist) * dir * 0.5f;<br>&nbsp; &nbsp;B.vel += (wantedDist - currentDist) * dir * 0.5f;<br>}</div><br>Explanaition - we want the chunks to be 10 units apart. If they are further away from each other, we pull them together by the distance needed. If they&#039;re closer, we push them away from each other. <br><br>(Small side note, I think the &quot;(B.pos - A.pos).normalized&quot; is correct, but it could be the other way around, haha! Try both and see what works, if you get stuff twitching out and disappearing from the screen, you have it in the wrong order.)<br><br>Ok, so let&#039;s step it up a notch. Notice that *0.5f? That means both chunks are affected equally. If we affect A more than B by the movement, it will appear as if B is heavier. Say that you add a mass parameter to the chunk class, you can do this:<br><br><div class="codeheader">Code:</div><div class="code">public void ConnectChunks(Chunk A, Chunk B){<br>&nbsp; &nbsp;float wantedDist = 10f;<br>&nbsp; &nbsp;float currentDist = Vector2.Distance(A.pos, B.pos);<br>&nbsp; &nbsp;float elasticity = 0.8f;<br>&nbsp; &nbsp;float massFac = A.mass/(A.mass+B.mass);<br><br>&nbsp; &nbsp;Vector2 dir = (B.pos - A.pos).normalized;<br><br>&nbsp; &nbsp;A.pos -= (wantedDist - currentDist) * dir * (1f - massFac) * elasticity;<br>&nbsp; &nbsp;A.vel -= (wantedDist - currentDist) * dir * (1f - massFac) * elasticity;<br>&nbsp; &nbsp;B.pos += (wantedDist - currentDist) * dir * massFac * elasticity;<br>&nbsp; &nbsp;B.vel += (wantedDist - currentDist) * dir * massFac * elasticity;<br>}</div><br>If A weights 1000 units, and B weights 2 units, we get a massFac of 1000 / (1000 + 2) = 0.998. If you look at the code, you&#039;ll see that this means that A will be moved pretty much not at all, and B will do almost the entire movement. This is why it takes 700 leeches to drown a vulture in rain world&nbsp; <img src="https://web.archive.org/web/20210309162437im_/https://forums.tigsource.com/Smileys/derek/cheesy.gif" alt="Cheesy" border="0"><br><br>Oh and I threw elasticity in there as well, but that&#039;s pretty straightforward.<br><br>I give zero guarantee that this is anywhere in the same galaxy cluster as approximating real physics, but it does what I want. I&#039;ve heard that this technique is called &quot;atomic bond physics&quot; (in Swedish, don&#039;t know about English) and that makes a lot of sense, but I haven&#039;t seen it utilized much elsewhere, which is a shame seeing how it&#039;s so simple and effective.<br><br>Of course you can make it so that one of the Chunks is not affected at all, while the other do all the moving. Actually this is a good place to start - have one chunk, and lock the other connection to the mouse position, and you get a little swingy thingy to play with. In my game the creatures have a set of body chunks that affect each other, and then they have a cosmetic layer on top of that which is just connected to these, but can&#039;t pull at them - effectually a massFac of 1.0f. This means that when the creature is offscreen I can just drop the cosmetic layer (or &quot;skin&quot; as I&#039;ve come to call it) and the actual game object will still behave the same.<br><br>A tail or tentacle in RW is a bunch of these that are connected to each other in succession.<br><br>This stuff locks two chunks to each other. If you want to turn it into a (wonky) collision physics engine, you just need to add &quot;if (currentDist &lt; wantedDist)&quot; and the chunks won&#039;t pull at each other, only push at each other if they&#039;re actually overlapping.<br><br>Everything in my game is just variations and elaborations on this theme! Though honestly not very big elaborations, the majority of it is just straight up this here code. Good luck&nbsp; <img src="https://web.archive.org/web/20210309162437im_/https://forums.tigsource.com/Smileys/derek/smiley.gif" alt="Smiley" border="0"> <img src="https://web.archive.org/web/20210309162437im_/https://forums.tigsource.com/Smileys/derek/hand-thumbsup-r.gif" alt="Hand Thumbs Up Right" border="0">